<?php
/**
 * AccountingApi
 * PHP version 5
 *
 * @category Class
 * @package  com\hydrogen\integration
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Hydrogen Integration API
 *
 * The Hydrogen Integration API
 *
 * OpenAPI spec version: 1.2.1
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.18
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace com\hydrogen\integration\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use com\hydrogen\integration\ApiException;
use com\hydrogen\integration\Configuration;
use com\hydrogen\integration\HeaderSelector;
use com\hydrogen\integration\ObjectSerializer;

/**
 * AccountingApi Class Doc Comment
 *
 * @category Class
 * @package  com\hydrogen\integration
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AccountingApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createOrUpdateCustomer
     *
     * Update/Create all customers in Nucleus for a given nucleus_client_id
     *
     * @param  string $nucleus_client_id nucleus_client_id (required)
     *
     * @throws \com\hydrogen\integration\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \com\hydrogen\integration\Model\AccountingFinalResponseVO
     */
    public function createOrUpdateCustomer($nucleus_client_id)
    {
        list($response) = $this->createOrUpdateCustomerWithHttpInfo($nucleus_client_id);
        return $response;
    }

    /**
     * Operation createOrUpdateCustomerWithHttpInfo
     *
     * Update/Create all customers in Nucleus for a given nucleus_client_id
     *
     * @param  string $nucleus_client_id nucleus_client_id (required)
     *
     * @throws \com\hydrogen\integration\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \com\hydrogen\integration\Model\AccountingFinalResponseVO, HTTP status code, HTTP response headers (array of strings)
     */
    public function createOrUpdateCustomerWithHttpInfo($nucleus_client_id)
    {
        $returnType = '\com\hydrogen\integration\Model\AccountingFinalResponseVO';
        $request = $this->createOrUpdateCustomerRequest($nucleus_client_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com\hydrogen\integration\Model\AccountingFinalResponseVO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createOrUpdateCustomerAsync
     *
     * Update/Create all customers in Nucleus for a given nucleus_client_id
     *
     * @param  string $nucleus_client_id nucleus_client_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createOrUpdateCustomerAsync($nucleus_client_id)
    {
        return $this->createOrUpdateCustomerAsyncWithHttpInfo($nucleus_client_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createOrUpdateCustomerAsyncWithHttpInfo
     *
     * Update/Create all customers in Nucleus for a given nucleus_client_id
     *
     * @param  string $nucleus_client_id nucleus_client_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createOrUpdateCustomerAsyncWithHttpInfo($nucleus_client_id)
    {
        $returnType = '\com\hydrogen\integration\Model\AccountingFinalResponseVO';
        $request = $this->createOrUpdateCustomerRequest($nucleus_client_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createOrUpdateCustomer'
     *
     * @param  string $nucleus_client_id nucleus_client_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createOrUpdateCustomerRequest($nucleus_client_id)
    {
        // verify the required parameter 'nucleus_client_id' is set
        if ($nucleus_client_id === null || (is_array($nucleus_client_id) && count($nucleus_client_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nucleus_client_id when calling createOrUpdateCustomer'
            );
        }

        $resourcePath = '/accounting/customer';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($nucleus_client_id !== null) {
            $queryParams['nucleus_client_id'] = ObjectSerializer::toQueryValue($nucleus_client_id);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createOrUpdateCustomerRevenue
     *
     * Update/Create all customers revenue in Nucleus for a given nucleus_customer_id
     *
     * @param  string $nucleus_customer_id nucleus_customer_id (required)
     * @param  \DateTime $start_date start_date (required)
     * @param  string $accounting_method accounting_method (optional, default to accrual)
     * @param  \DateTime $end_date end_date (optional, default to null)
     *
     * @throws \com\hydrogen\integration\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \com\hydrogen\integration\Model\AccountingFinalResponseVO
     */
    public function createOrUpdateCustomerRevenue($nucleus_customer_id, $start_date, $accounting_method = 'accrual', $end_date = 'null')
    {
        list($response) = $this->createOrUpdateCustomerRevenueWithHttpInfo($nucleus_customer_id, $start_date, $accounting_method, $end_date);
        return $response;
    }

    /**
     * Operation createOrUpdateCustomerRevenueWithHttpInfo
     *
     * Update/Create all customers revenue in Nucleus for a given nucleus_customer_id
     *
     * @param  string $nucleus_customer_id nucleus_customer_id (required)
     * @param  \DateTime $start_date start_date (required)
     * @param  string $accounting_method accounting_method (optional, default to accrual)
     * @param  \DateTime $end_date end_date (optional, default to null)
     *
     * @throws \com\hydrogen\integration\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \com\hydrogen\integration\Model\AccountingFinalResponseVO, HTTP status code, HTTP response headers (array of strings)
     */
    public function createOrUpdateCustomerRevenueWithHttpInfo($nucleus_customer_id, $start_date, $accounting_method = 'accrual', $end_date = 'null')
    {
        $returnType = '\com\hydrogen\integration\Model\AccountingFinalResponseVO';
        $request = $this->createOrUpdateCustomerRevenueRequest($nucleus_customer_id, $start_date, $accounting_method, $end_date);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com\hydrogen\integration\Model\AccountingFinalResponseVO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createOrUpdateCustomerRevenueAsync
     *
     * Update/Create all customers revenue in Nucleus for a given nucleus_customer_id
     *
     * @param  string $nucleus_customer_id nucleus_customer_id (required)
     * @param  \DateTime $start_date start_date (required)
     * @param  string $accounting_method accounting_method (optional, default to accrual)
     * @param  \DateTime $end_date end_date (optional, default to null)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createOrUpdateCustomerRevenueAsync($nucleus_customer_id, $start_date, $accounting_method = 'accrual', $end_date = 'null')
    {
        return $this->createOrUpdateCustomerRevenueAsyncWithHttpInfo($nucleus_customer_id, $start_date, $accounting_method, $end_date)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createOrUpdateCustomerRevenueAsyncWithHttpInfo
     *
     * Update/Create all customers revenue in Nucleus for a given nucleus_customer_id
     *
     * @param  string $nucleus_customer_id nucleus_customer_id (required)
     * @param  \DateTime $start_date start_date (required)
     * @param  string $accounting_method accounting_method (optional, default to accrual)
     * @param  \DateTime $end_date end_date (optional, default to null)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createOrUpdateCustomerRevenueAsyncWithHttpInfo($nucleus_customer_id, $start_date, $accounting_method = 'accrual', $end_date = 'null')
    {
        $returnType = '\com\hydrogen\integration\Model\AccountingFinalResponseVO';
        $request = $this->createOrUpdateCustomerRevenueRequest($nucleus_customer_id, $start_date, $accounting_method, $end_date);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createOrUpdateCustomerRevenue'
     *
     * @param  string $nucleus_customer_id nucleus_customer_id (required)
     * @param  \DateTime $start_date start_date (required)
     * @param  string $accounting_method accounting_method (optional, default to accrual)
     * @param  \DateTime $end_date end_date (optional, default to null)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createOrUpdateCustomerRevenueRequest($nucleus_customer_id, $start_date, $accounting_method = 'accrual', $end_date = 'null')
    {
        // verify the required parameter 'nucleus_customer_id' is set
        if ($nucleus_customer_id === null || (is_array($nucleus_customer_id) && count($nucleus_customer_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nucleus_customer_id when calling createOrUpdateCustomerRevenue'
            );
        }
        // verify the required parameter 'start_date' is set
        if ($start_date === null || (is_array($start_date) && count($start_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $start_date when calling createOrUpdateCustomerRevenue'
            );
        }

        $resourcePath = '/accounting/customer_revenue/{nucleus_customer_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accounting_method !== null) {
            $queryParams['accounting_method'] = ObjectSerializer::toQueryValue($accounting_method);
        }
        // query params
        if ($end_date !== null) {
            $queryParams['end_date'] = ObjectSerializer::toQueryValue($end_date);
        }
        // query params
        if ($start_date !== null) {
            $queryParams['start_date'] = ObjectSerializer::toQueryValue($start_date);
        }

        // path params
        if ($nucleus_customer_id !== null) {
            $resourcePath = str_replace(
                '{' . 'nucleus_customer_id' . '}',
                ObjectSerializer::toPathValue($nucleus_customer_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createOrUpdateInvoicePayment
     *
     * Create/Update invoice payment in Nucleus for a given nucleus_invoice_id
     *
     * @param  string $nucleus_invoice_id nucleus_invoice_id (required)
     *
     * @throws \com\hydrogen\integration\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \com\hydrogen\integration\Model\AccountingFinalResponseVO
     */
    public function createOrUpdateInvoicePayment($nucleus_invoice_id)
    {
        list($response) = $this->createOrUpdateInvoicePaymentWithHttpInfo($nucleus_invoice_id);
        return $response;
    }

    /**
     * Operation createOrUpdateInvoicePaymentWithHttpInfo
     *
     * Create/Update invoice payment in Nucleus for a given nucleus_invoice_id
     *
     * @param  string $nucleus_invoice_id nucleus_invoice_id (required)
     *
     * @throws \com\hydrogen\integration\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \com\hydrogen\integration\Model\AccountingFinalResponseVO, HTTP status code, HTTP response headers (array of strings)
     */
    public function createOrUpdateInvoicePaymentWithHttpInfo($nucleus_invoice_id)
    {
        $returnType = '\com\hydrogen\integration\Model\AccountingFinalResponseVO';
        $request = $this->createOrUpdateInvoicePaymentRequest($nucleus_invoice_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com\hydrogen\integration\Model\AccountingFinalResponseVO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createOrUpdateInvoicePaymentAsync
     *
     * Create/Update invoice payment in Nucleus for a given nucleus_invoice_id
     *
     * @param  string $nucleus_invoice_id nucleus_invoice_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createOrUpdateInvoicePaymentAsync($nucleus_invoice_id)
    {
        return $this->createOrUpdateInvoicePaymentAsyncWithHttpInfo($nucleus_invoice_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createOrUpdateInvoicePaymentAsyncWithHttpInfo
     *
     * Create/Update invoice payment in Nucleus for a given nucleus_invoice_id
     *
     * @param  string $nucleus_invoice_id nucleus_invoice_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createOrUpdateInvoicePaymentAsyncWithHttpInfo($nucleus_invoice_id)
    {
        $returnType = '\com\hydrogen\integration\Model\AccountingFinalResponseVO';
        $request = $this->createOrUpdateInvoicePaymentRequest($nucleus_invoice_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createOrUpdateInvoicePayment'
     *
     * @param  string $nucleus_invoice_id nucleus_invoice_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createOrUpdateInvoicePaymentRequest($nucleus_invoice_id)
    {
        // verify the required parameter 'nucleus_invoice_id' is set
        if ($nucleus_invoice_id === null || (is_array($nucleus_invoice_id) && count($nucleus_invoice_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nucleus_invoice_id when calling createOrUpdateInvoicePayment'
            );
        }

        $resourcePath = '/accounting/invoice_payment/{nucleus_invoice_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($nucleus_invoice_id !== null) {
            $resourcePath = str_replace(
                '{' . 'nucleus_invoice_id' . '}',
                ObjectSerializer::toPathValue($nucleus_invoice_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createOrUpdateInvoices
     *
     * Update/Create all invoices in Nucleus for a given nucleus_client_id
     *
     * @param  string $nucleus_customer_id nucleus_customer_id (required)
     * @param  \DateTime $start_date start_date (required)
     * @param  \DateTime $end_date end_date (optional, default to null)
     *
     * @throws \com\hydrogen\integration\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \com\hydrogen\integration\Model\AccountingFinalResponseVO
     */
    public function createOrUpdateInvoices($nucleus_customer_id, $start_date, $end_date = 'null')
    {
        list($response) = $this->createOrUpdateInvoicesWithHttpInfo($nucleus_customer_id, $start_date, $end_date);
        return $response;
    }

    /**
     * Operation createOrUpdateInvoicesWithHttpInfo
     *
     * Update/Create all invoices in Nucleus for a given nucleus_client_id
     *
     * @param  string $nucleus_customer_id nucleus_customer_id (required)
     * @param  \DateTime $start_date start_date (required)
     * @param  \DateTime $end_date end_date (optional, default to null)
     *
     * @throws \com\hydrogen\integration\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \com\hydrogen\integration\Model\AccountingFinalResponseVO, HTTP status code, HTTP response headers (array of strings)
     */
    public function createOrUpdateInvoicesWithHttpInfo($nucleus_customer_id, $start_date, $end_date = 'null')
    {
        $returnType = '\com\hydrogen\integration\Model\AccountingFinalResponseVO';
        $request = $this->createOrUpdateInvoicesRequest($nucleus_customer_id, $start_date, $end_date);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com\hydrogen\integration\Model\AccountingFinalResponseVO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createOrUpdateInvoicesAsync
     *
     * Update/Create all invoices in Nucleus for a given nucleus_client_id
     *
     * @param  string $nucleus_customer_id nucleus_customer_id (required)
     * @param  \DateTime $start_date start_date (required)
     * @param  \DateTime $end_date end_date (optional, default to null)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createOrUpdateInvoicesAsync($nucleus_customer_id, $start_date, $end_date = 'null')
    {
        return $this->createOrUpdateInvoicesAsyncWithHttpInfo($nucleus_customer_id, $start_date, $end_date)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createOrUpdateInvoicesAsyncWithHttpInfo
     *
     * Update/Create all invoices in Nucleus for a given nucleus_client_id
     *
     * @param  string $nucleus_customer_id nucleus_customer_id (required)
     * @param  \DateTime $start_date start_date (required)
     * @param  \DateTime $end_date end_date (optional, default to null)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createOrUpdateInvoicesAsyncWithHttpInfo($nucleus_customer_id, $start_date, $end_date = 'null')
    {
        $returnType = '\com\hydrogen\integration\Model\AccountingFinalResponseVO';
        $request = $this->createOrUpdateInvoicesRequest($nucleus_customer_id, $start_date, $end_date);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createOrUpdateInvoices'
     *
     * @param  string $nucleus_customer_id nucleus_customer_id (required)
     * @param  \DateTime $start_date start_date (required)
     * @param  \DateTime $end_date end_date (optional, default to null)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createOrUpdateInvoicesRequest($nucleus_customer_id, $start_date, $end_date = 'null')
    {
        // verify the required parameter 'nucleus_customer_id' is set
        if ($nucleus_customer_id === null || (is_array($nucleus_customer_id) && count($nucleus_customer_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nucleus_customer_id when calling createOrUpdateInvoices'
            );
        }
        // verify the required parameter 'start_date' is set
        if ($start_date === null || (is_array($start_date) && count($start_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $start_date when calling createOrUpdateInvoices'
            );
        }

        $resourcePath = '/accounting/invoice';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($end_date !== null) {
            $queryParams['end_date'] = ObjectSerializer::toQueryValue($end_date);
        }
        // query params
        if ($nucleus_customer_id !== null) {
            $queryParams['nucleus_customer_id'] = ObjectSerializer::toQueryValue($nucleus_customer_id);
        }
        // query params
        if ($start_date !== null) {
            $queryParams['start_date'] = ObjectSerializer::toQueryValue($start_date);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteAccountingVendorAccessConfigIsActiveById
     *
     * Permanently delete relation with particular accounting vendor.
     *
     * @param  string $id id (required)
     *
     * @throws \com\hydrogen\integration\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteAccountingVendorAccessConfigIsActiveById($id)
    {
        $this->deleteAccountingVendorAccessConfigIsActiveByIdWithHttpInfo($id);
    }

    /**
     * Operation deleteAccountingVendorAccessConfigIsActiveByIdWithHttpInfo
     *
     * Permanently delete relation with particular accounting vendor.
     *
     * @param  string $id id (required)
     *
     * @throws \com\hydrogen\integration\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAccountingVendorAccessConfigIsActiveByIdWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->deleteAccountingVendorAccessConfigIsActiveByIdRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteAccountingVendorAccessConfigIsActiveByIdAsync
     *
     * Permanently delete relation with particular accounting vendor.
     *
     * @param  string $id id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAccountingVendorAccessConfigIsActiveByIdAsync($id)
    {
        return $this->deleteAccountingVendorAccessConfigIsActiveByIdAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteAccountingVendorAccessConfigIsActiveByIdAsyncWithHttpInfo
     *
     * Permanently delete relation with particular accounting vendor.
     *
     * @param  string $id id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAccountingVendorAccessConfigIsActiveByIdAsyncWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->deleteAccountingVendorAccessConfigIsActiveByIdRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteAccountingVendorAccessConfigIsActiveById'
     *
     * @param  string $id id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteAccountingVendorAccessConfigIsActiveByIdRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteAccountingVendorAccessConfigIsActiveById'
            );
        }

        $resourcePath = '/accounting/vendor/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAccountingStats
     *
     * Get accounting stats from financial statements at the vendor for the business provided
     *
     * @param  string $accounting_method accounting_method (optional, default to accrual)
     * @param  string $nucleus_client_id nucleus_client_id (optional)
     * @param  string $period_length period_length (optional)
     * @param  int $period_month period_month (optional)
     * @param  int $period_quarter period_quarter (optional)
     * @param  string $period_type period_type (optional)
     * @param  int $period_year period_year (optional)
     * @param  string $report report (optional)
     * @param  \DateTime $statement_date statement_date (optional)
     *
     * @throws \com\hydrogen\integration\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \com\hydrogen\integration\Model\AccountingFinalResponseVO
     */
    public function getAccountingStats($accounting_method = 'accrual', $nucleus_client_id = null, $period_length = null, $period_month = null, $period_quarter = null, $period_type = null, $period_year = null, $report = null, $statement_date = null)
    {
        list($response) = $this->getAccountingStatsWithHttpInfo($accounting_method, $nucleus_client_id, $period_length, $period_month, $period_quarter, $period_type, $period_year, $report, $statement_date);
        return $response;
    }

    /**
     * Operation getAccountingStatsWithHttpInfo
     *
     * Get accounting stats from financial statements at the vendor for the business provided
     *
     * @param  string $accounting_method accounting_method (optional, default to accrual)
     * @param  string $nucleus_client_id nucleus_client_id (optional)
     * @param  string $period_length period_length (optional)
     * @param  int $period_month period_month (optional)
     * @param  int $period_quarter period_quarter (optional)
     * @param  string $period_type period_type (optional)
     * @param  int $period_year period_year (optional)
     * @param  string $report report (optional)
     * @param  \DateTime $statement_date statement_date (optional)
     *
     * @throws \com\hydrogen\integration\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \com\hydrogen\integration\Model\AccountingFinalResponseVO, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAccountingStatsWithHttpInfo($accounting_method = 'accrual', $nucleus_client_id = null, $period_length = null, $period_month = null, $period_quarter = null, $period_type = null, $period_year = null, $report = null, $statement_date = null)
    {
        $returnType = '\com\hydrogen\integration\Model\AccountingFinalResponseVO';
        $request = $this->getAccountingStatsRequest($accounting_method, $nucleus_client_id, $period_length, $period_month, $period_quarter, $period_type, $period_year, $report, $statement_date);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com\hydrogen\integration\Model\AccountingFinalResponseVO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAccountingStatsAsync
     *
     * Get accounting stats from financial statements at the vendor for the business provided
     *
     * @param  string $accounting_method accounting_method (optional, default to accrual)
     * @param  string $nucleus_client_id nucleus_client_id (optional)
     * @param  string $period_length period_length (optional)
     * @param  int $period_month period_month (optional)
     * @param  int $period_quarter period_quarter (optional)
     * @param  string $period_type period_type (optional)
     * @param  int $period_year period_year (optional)
     * @param  string $report report (optional)
     * @param  \DateTime $statement_date statement_date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAccountingStatsAsync($accounting_method = 'accrual', $nucleus_client_id = null, $period_length = null, $period_month = null, $period_quarter = null, $period_type = null, $period_year = null, $report = null, $statement_date = null)
    {
        return $this->getAccountingStatsAsyncWithHttpInfo($accounting_method, $nucleus_client_id, $period_length, $period_month, $period_quarter, $period_type, $period_year, $report, $statement_date)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAccountingStatsAsyncWithHttpInfo
     *
     * Get accounting stats from financial statements at the vendor for the business provided
     *
     * @param  string $accounting_method accounting_method (optional, default to accrual)
     * @param  string $nucleus_client_id nucleus_client_id (optional)
     * @param  string $period_length period_length (optional)
     * @param  int $period_month period_month (optional)
     * @param  int $period_quarter period_quarter (optional)
     * @param  string $period_type period_type (optional)
     * @param  int $period_year period_year (optional)
     * @param  string $report report (optional)
     * @param  \DateTime $statement_date statement_date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAccountingStatsAsyncWithHttpInfo($accounting_method = 'accrual', $nucleus_client_id = null, $period_length = null, $period_month = null, $period_quarter = null, $period_type = null, $period_year = null, $report = null, $statement_date = null)
    {
        $returnType = '\com\hydrogen\integration\Model\AccountingFinalResponseVO';
        $request = $this->getAccountingStatsRequest($accounting_method, $nucleus_client_id, $period_length, $period_month, $period_quarter, $period_type, $period_year, $report, $statement_date);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAccountingStats'
     *
     * @param  string $accounting_method accounting_method (optional, default to accrual)
     * @param  string $nucleus_client_id nucleus_client_id (optional)
     * @param  string $period_length period_length (optional)
     * @param  int $period_month period_month (optional)
     * @param  int $period_quarter period_quarter (optional)
     * @param  string $period_type period_type (optional)
     * @param  int $period_year period_year (optional)
     * @param  string $report report (optional)
     * @param  \DateTime $statement_date statement_date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAccountingStatsRequest($accounting_method = 'accrual', $nucleus_client_id = null, $period_length = null, $period_month = null, $period_quarter = null, $period_type = null, $period_year = null, $report = null, $statement_date = null)
    {

        $resourcePath = '/accounting/report';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accounting_method !== null) {
            $queryParams['accounting_method'] = ObjectSerializer::toQueryValue($accounting_method);
        }
        // query params
        if ($nucleus_client_id !== null) {
            $queryParams['nucleus_client_id'] = ObjectSerializer::toQueryValue($nucleus_client_id);
        }
        // query params
        if ($period_length !== null) {
            $queryParams['period_length'] = ObjectSerializer::toQueryValue($period_length);
        }
        // query params
        if ($period_month !== null) {
            $queryParams['period_month'] = ObjectSerializer::toQueryValue($period_month);
        }
        // query params
        if ($period_quarter !== null) {
            $queryParams['period_quarter'] = ObjectSerializer::toQueryValue($period_quarter);
        }
        // query params
        if ($period_type !== null) {
            $queryParams['period_type'] = ObjectSerializer::toQueryValue($period_type);
        }
        // query params
        if ($period_year !== null) {
            $queryParams['period_year'] = ObjectSerializer::toQueryValue($period_year);
        }
        // query params
        if ($report !== null) {
            $queryParams['report'] = ObjectSerializer::toQueryValue($report);
        }
        // query params
        if ($statement_date !== null) {
            $queryParams['statement_date'] = ObjectSerializer::toQueryValue($statement_date);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAccountingVendorInfoUsingClientId
     *
     * Get Accounting Vendor Config
     *
     * @param  string $nucleus_client_id nucleus_client_id (required)
     *
     * @throws \com\hydrogen\integration\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \com\hydrogen\integration\Model\VendorAccessConfigVO
     */
    public function getAccountingVendorInfoUsingClientId($nucleus_client_id)
    {
        list($response) = $this->getAccountingVendorInfoUsingClientIdWithHttpInfo($nucleus_client_id);
        return $response;
    }

    /**
     * Operation getAccountingVendorInfoUsingClientIdWithHttpInfo
     *
     * Get Accounting Vendor Config
     *
     * @param  string $nucleus_client_id nucleus_client_id (required)
     *
     * @throws \com\hydrogen\integration\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \com\hydrogen\integration\Model\VendorAccessConfigVO, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAccountingVendorInfoUsingClientIdWithHttpInfo($nucleus_client_id)
    {
        $returnType = '\com\hydrogen\integration\Model\VendorAccessConfigVO';
        $request = $this->getAccountingVendorInfoUsingClientIdRequest($nucleus_client_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com\hydrogen\integration\Model\VendorAccessConfigVO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAccountingVendorInfoUsingClientIdAsync
     *
     * Get Accounting Vendor Config
     *
     * @param  string $nucleus_client_id nucleus_client_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAccountingVendorInfoUsingClientIdAsync($nucleus_client_id)
    {
        return $this->getAccountingVendorInfoUsingClientIdAsyncWithHttpInfo($nucleus_client_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAccountingVendorInfoUsingClientIdAsyncWithHttpInfo
     *
     * Get Accounting Vendor Config
     *
     * @param  string $nucleus_client_id nucleus_client_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAccountingVendorInfoUsingClientIdAsyncWithHttpInfo($nucleus_client_id)
    {
        $returnType = '\com\hydrogen\integration\Model\VendorAccessConfigVO';
        $request = $this->getAccountingVendorInfoUsingClientIdRequest($nucleus_client_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAccountingVendorInfoUsingClientId'
     *
     * @param  string $nucleus_client_id nucleus_client_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAccountingVendorInfoUsingClientIdRequest($nucleus_client_id)
    {
        // verify the required parameter 'nucleus_client_id' is set
        if ($nucleus_client_id === null || (is_array($nucleus_client_id) && count($nucleus_client_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nucleus_client_id when calling getAccountingVendorInfoUsingClientId'
            );
        }

        $resourcePath = '/accounting/vendor/{nucleus_client_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($nucleus_client_id !== null) {
            $resourcePath = str_replace(
                '{' . 'nucleus_client_id' . '}',
                ObjectSerializer::toPathValue($nucleus_client_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateAccountingVendorAccessConfigIsActiveById
     *
     * Enable/Disable relation with particular accounting vendor.
     *
     * @param  string $id id (required)
     * @param  bool $is_active is_active (required)
     *
     * @throws \com\hydrogen\integration\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \com\hydrogen\integration\Model\VendorAccessConfigVO
     */
    public function updateAccountingVendorAccessConfigIsActiveById($id, $is_active)
    {
        list($response) = $this->updateAccountingVendorAccessConfigIsActiveByIdWithHttpInfo($id, $is_active);
        return $response;
    }

    /**
     * Operation updateAccountingVendorAccessConfigIsActiveByIdWithHttpInfo
     *
     * Enable/Disable relation with particular accounting vendor.
     *
     * @param  string $id id (required)
     * @param  bool $is_active is_active (required)
     *
     * @throws \com\hydrogen\integration\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \com\hydrogen\integration\Model\VendorAccessConfigVO, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateAccountingVendorAccessConfigIsActiveByIdWithHttpInfo($id, $is_active)
    {
        $returnType = '\com\hydrogen\integration\Model\VendorAccessConfigVO';
        $request = $this->updateAccountingVendorAccessConfigIsActiveByIdRequest($id, $is_active);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com\hydrogen\integration\Model\VendorAccessConfigVO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateAccountingVendorAccessConfigIsActiveByIdAsync
     *
     * Enable/Disable relation with particular accounting vendor.
     *
     * @param  string $id id (required)
     * @param  bool $is_active is_active (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateAccountingVendorAccessConfigIsActiveByIdAsync($id, $is_active)
    {
        return $this->updateAccountingVendorAccessConfigIsActiveByIdAsyncWithHttpInfo($id, $is_active)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateAccountingVendorAccessConfigIsActiveByIdAsyncWithHttpInfo
     *
     * Enable/Disable relation with particular accounting vendor.
     *
     * @param  string $id id (required)
     * @param  bool $is_active is_active (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateAccountingVendorAccessConfigIsActiveByIdAsyncWithHttpInfo($id, $is_active)
    {
        $returnType = '\com\hydrogen\integration\Model\VendorAccessConfigVO';
        $request = $this->updateAccountingVendorAccessConfigIsActiveByIdRequest($id, $is_active);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateAccountingVendorAccessConfigIsActiveById'
     *
     * @param  string $id id (required)
     * @param  bool $is_active is_active (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateAccountingVendorAccessConfigIsActiveByIdRequest($id, $is_active)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updateAccountingVendorAccessConfigIsActiveById'
            );
        }
        // verify the required parameter 'is_active' is set
        if ($is_active === null || (is_array($is_active) && count($is_active) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $is_active when calling updateAccountingVendorAccessConfigIsActiveById'
            );
        }

        $resourcePath = '/accounting/vendor/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($is_active !== null) {
            $queryParams['is_active'] = ObjectSerializer::toQueryValue($is_active);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateCustomer
     *
     * Update customer in Nucleus for a given nucleus_customer_id
     *
     * @param  string $nucleus_customer_id nucleus_customer_id (required)
     *
     * @throws \com\hydrogen\integration\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \com\hydrogen\integration\Model\AccountingFinalResponseVO
     */
    public function updateCustomer($nucleus_customer_id)
    {
        list($response) = $this->updateCustomerWithHttpInfo($nucleus_customer_id);
        return $response;
    }

    /**
     * Operation updateCustomerWithHttpInfo
     *
     * Update customer in Nucleus for a given nucleus_customer_id
     *
     * @param  string $nucleus_customer_id nucleus_customer_id (required)
     *
     * @throws \com\hydrogen\integration\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \com\hydrogen\integration\Model\AccountingFinalResponseVO, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateCustomerWithHttpInfo($nucleus_customer_id)
    {
        $returnType = '\com\hydrogen\integration\Model\AccountingFinalResponseVO';
        $request = $this->updateCustomerRequest($nucleus_customer_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com\hydrogen\integration\Model\AccountingFinalResponseVO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateCustomerAsync
     *
     * Update customer in Nucleus for a given nucleus_customer_id
     *
     * @param  string $nucleus_customer_id nucleus_customer_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateCustomerAsync($nucleus_customer_id)
    {
        return $this->updateCustomerAsyncWithHttpInfo($nucleus_customer_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateCustomerAsyncWithHttpInfo
     *
     * Update customer in Nucleus for a given nucleus_customer_id
     *
     * @param  string $nucleus_customer_id nucleus_customer_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateCustomerAsyncWithHttpInfo($nucleus_customer_id)
    {
        $returnType = '\com\hydrogen\integration\Model\AccountingFinalResponseVO';
        $request = $this->updateCustomerRequest($nucleus_customer_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateCustomer'
     *
     * @param  string $nucleus_customer_id nucleus_customer_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateCustomerRequest($nucleus_customer_id)
    {
        // verify the required parameter 'nucleus_customer_id' is set
        if ($nucleus_customer_id === null || (is_array($nucleus_customer_id) && count($nucleus_customer_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nucleus_customer_id when calling updateCustomer'
            );
        }

        $resourcePath = '/accounting/customer/{nucleus_customer_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($nucleus_customer_id !== null) {
            $resourcePath = str_replace(
                '{' . 'nucleus_customer_id' . '}',
                ObjectSerializer::toPathValue($nucleus_customer_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateInvoice
     *
     * Update invoice in Nucleus for a given nucleus_invoice_id
     *
     * @param  string $nucleus_invoice_id nucleus_invoice_id (required)
     *
     * @throws \com\hydrogen\integration\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \com\hydrogen\integration\Model\AccountingFinalResponseVO
     */
    public function updateInvoice($nucleus_invoice_id)
    {
        list($response) = $this->updateInvoiceWithHttpInfo($nucleus_invoice_id);
        return $response;
    }

    /**
     * Operation updateInvoiceWithHttpInfo
     *
     * Update invoice in Nucleus for a given nucleus_invoice_id
     *
     * @param  string $nucleus_invoice_id nucleus_invoice_id (required)
     *
     * @throws \com\hydrogen\integration\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \com\hydrogen\integration\Model\AccountingFinalResponseVO, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateInvoiceWithHttpInfo($nucleus_invoice_id)
    {
        $returnType = '\com\hydrogen\integration\Model\AccountingFinalResponseVO';
        $request = $this->updateInvoiceRequest($nucleus_invoice_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com\hydrogen\integration\Model\AccountingFinalResponseVO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateInvoiceAsync
     *
     * Update invoice in Nucleus for a given nucleus_invoice_id
     *
     * @param  string $nucleus_invoice_id nucleus_invoice_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateInvoiceAsync($nucleus_invoice_id)
    {
        return $this->updateInvoiceAsyncWithHttpInfo($nucleus_invoice_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateInvoiceAsyncWithHttpInfo
     *
     * Update invoice in Nucleus for a given nucleus_invoice_id
     *
     * @param  string $nucleus_invoice_id nucleus_invoice_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateInvoiceAsyncWithHttpInfo($nucleus_invoice_id)
    {
        $returnType = '\com\hydrogen\integration\Model\AccountingFinalResponseVO';
        $request = $this->updateInvoiceRequest($nucleus_invoice_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateInvoice'
     *
     * @param  string $nucleus_invoice_id nucleus_invoice_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateInvoiceRequest($nucleus_invoice_id)
    {
        // verify the required parameter 'nucleus_invoice_id' is set
        if ($nucleus_invoice_id === null || (is_array($nucleus_invoice_id) && count($nucleus_invoice_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nucleus_invoice_id when calling updateInvoice'
            );
        }

        $resourcePath = '/accounting/invoice/{nucleus_invoice_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($nucleus_invoice_id !== null) {
            $resourcePath = str_replace(
                '{' . 'nucleus_invoice_id' . '}',
                ObjectSerializer::toPathValue($nucleus_invoice_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
