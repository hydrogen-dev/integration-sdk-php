<?php
/**
 * AggregationApi
 * PHP version 5
 *
 * @category Class
 * @package  com\hydrogen\integration
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Hydrogen Integration API
 *
 * The Hydrogen Integration API
 *
 * OpenAPI spec version: 1.2.1
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.18
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace com\hydrogen\integration\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use com\hydrogen\integration\ApiException;
use com\hydrogen\integration\Configuration;
use com\hydrogen\integration\HeaderSelector;
use com\hydrogen\integration\ObjectSerializer;

/**
 * AggregationApi Class Doc Comment
 *
 * @category Class
 * @package  com\hydrogen\integration
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AggregationApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createAggregationAccountUsingPost
     *
     * Create mapping between client,vendor,tenant
     *
     * @param  \com\hydrogen\integration\Model\AggregationRequestObject $aggregation_request_object aggregationRequestObject (required)
     *
     * @throws \com\hydrogen\integration\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \com\hydrogen\integration\Model\AggregationAccountsResponseVO
     */
    public function createAggregationAccountUsingPost($aggregation_request_object)
    {
        list($response) = $this->createAggregationAccountUsingPostWithHttpInfo($aggregation_request_object);
        return $response;
    }

    /**
     * Operation createAggregationAccountUsingPostWithHttpInfo
     *
     * Create mapping between client,vendor,tenant
     *
     * @param  \com\hydrogen\integration\Model\AggregationRequestObject $aggregation_request_object aggregationRequestObject (required)
     *
     * @throws \com\hydrogen\integration\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \com\hydrogen\integration\Model\AggregationAccountsResponseVO, HTTP status code, HTTP response headers (array of strings)
     */
    public function createAggregationAccountUsingPostWithHttpInfo($aggregation_request_object)
    {
        $returnType = '\com\hydrogen\integration\Model\AggregationAccountsResponseVO';
        $request = $this->createAggregationAccountUsingPostRequest($aggregation_request_object);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com\hydrogen\integration\Model\AggregationAccountsResponseVO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createAggregationAccountUsingPostAsync
     *
     * Create mapping between client,vendor,tenant
     *
     * @param  \com\hydrogen\integration\Model\AggregationRequestObject $aggregation_request_object aggregationRequestObject (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createAggregationAccountUsingPostAsync($aggregation_request_object)
    {
        return $this->createAggregationAccountUsingPostAsyncWithHttpInfo($aggregation_request_object)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createAggregationAccountUsingPostAsyncWithHttpInfo
     *
     * Create mapping between client,vendor,tenant
     *
     * @param  \com\hydrogen\integration\Model\AggregationRequestObject $aggregation_request_object aggregationRequestObject (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createAggregationAccountUsingPostAsyncWithHttpInfo($aggregation_request_object)
    {
        $returnType = '\com\hydrogen\integration\Model\AggregationAccountsResponseVO';
        $request = $this->createAggregationAccountUsingPostRequest($aggregation_request_object);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createAggregationAccountUsingPost'
     *
     * @param  \com\hydrogen\integration\Model\AggregationRequestObject $aggregation_request_object aggregationRequestObject (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createAggregationAccountUsingPostRequest($aggregation_request_object)
    {
        // verify the required parameter 'aggregation_request_object' is set
        if ($aggregation_request_object === null || (is_array($aggregation_request_object) && count($aggregation_request_object) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $aggregation_request_object when calling createAggregationAccountUsingPost'
            );
        }

        $resourcePath = '/aggregation/account';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($aggregation_request_object)) {
            $_tempBody = $aggregation_request_object;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createPropertyValueUsingPost
     *
     * Create mapping between client,vendor,tenant for the property
     *
     * @param  \com\hydrogen\integration\Model\AggregationRequestObject $aggregation_request_object aggregationRequestObject (required)
     *
     * @throws \com\hydrogen\integration\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \com\hydrogen\integration\Model\PropertyValueResponseVO
     */
    public function createPropertyValueUsingPost($aggregation_request_object)
    {
        list($response) = $this->createPropertyValueUsingPostWithHttpInfo($aggregation_request_object);
        return $response;
    }

    /**
     * Operation createPropertyValueUsingPostWithHttpInfo
     *
     * Create mapping between client,vendor,tenant for the property
     *
     * @param  \com\hydrogen\integration\Model\AggregationRequestObject $aggregation_request_object aggregationRequestObject (required)
     *
     * @throws \com\hydrogen\integration\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \com\hydrogen\integration\Model\PropertyValueResponseVO, HTTP status code, HTTP response headers (array of strings)
     */
    public function createPropertyValueUsingPostWithHttpInfo($aggregation_request_object)
    {
        $returnType = '\com\hydrogen\integration\Model\PropertyValueResponseVO';
        $request = $this->createPropertyValueUsingPostRequest($aggregation_request_object);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com\hydrogen\integration\Model\PropertyValueResponseVO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createPropertyValueUsingPostAsync
     *
     * Create mapping between client,vendor,tenant for the property
     *
     * @param  \com\hydrogen\integration\Model\AggregationRequestObject $aggregation_request_object aggregationRequestObject (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createPropertyValueUsingPostAsync($aggregation_request_object)
    {
        return $this->createPropertyValueUsingPostAsyncWithHttpInfo($aggregation_request_object)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createPropertyValueUsingPostAsyncWithHttpInfo
     *
     * Create mapping between client,vendor,tenant for the property
     *
     * @param  \com\hydrogen\integration\Model\AggregationRequestObject $aggregation_request_object aggregationRequestObject (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createPropertyValueUsingPostAsyncWithHttpInfo($aggregation_request_object)
    {
        $returnType = '\com\hydrogen\integration\Model\PropertyValueResponseVO';
        $request = $this->createPropertyValueUsingPostRequest($aggregation_request_object);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createPropertyValueUsingPost'
     *
     * @param  \com\hydrogen\integration\Model\AggregationRequestObject $aggregation_request_object aggregationRequestObject (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createPropertyValueUsingPostRequest($aggregation_request_object)
    {
        // verify the required parameter 'aggregation_request_object' is set
        if ($aggregation_request_object === null || (is_array($aggregation_request_object) && count($aggregation_request_object) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $aggregation_request_object when calling createPropertyValueUsingPost'
            );
        }

        $resourcePath = '/property_value';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($aggregation_request_object)) {
            $_tempBody = $aggregation_request_object;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteAggregationAccountUsingDelete
     *
     * De-Link mapping between client,vendor,tenant
     *
     * @param  string $nucleus_aggregation_account_id nucleus_aggregation_account_id (required)
     *
     * @throws \com\hydrogen\integration\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteAggregationAccountUsingDelete($nucleus_aggregation_account_id)
    {
        $this->deleteAggregationAccountUsingDeleteWithHttpInfo($nucleus_aggregation_account_id);
    }

    /**
     * Operation deleteAggregationAccountUsingDeleteWithHttpInfo
     *
     * De-Link mapping between client,vendor,tenant
     *
     * @param  string $nucleus_aggregation_account_id nucleus_aggregation_account_id (required)
     *
     * @throws \com\hydrogen\integration\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAggregationAccountUsingDeleteWithHttpInfo($nucleus_aggregation_account_id)
    {
        $returnType = '';
        $request = $this->deleteAggregationAccountUsingDeleteRequest($nucleus_aggregation_account_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteAggregationAccountUsingDeleteAsync
     *
     * De-Link mapping between client,vendor,tenant
     *
     * @param  string $nucleus_aggregation_account_id nucleus_aggregation_account_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAggregationAccountUsingDeleteAsync($nucleus_aggregation_account_id)
    {
        return $this->deleteAggregationAccountUsingDeleteAsyncWithHttpInfo($nucleus_aggregation_account_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteAggregationAccountUsingDeleteAsyncWithHttpInfo
     *
     * De-Link mapping between client,vendor,tenant
     *
     * @param  string $nucleus_aggregation_account_id nucleus_aggregation_account_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAggregationAccountUsingDeleteAsyncWithHttpInfo($nucleus_aggregation_account_id)
    {
        $returnType = '';
        $request = $this->deleteAggregationAccountUsingDeleteRequest($nucleus_aggregation_account_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteAggregationAccountUsingDelete'
     *
     * @param  string $nucleus_aggregation_account_id nucleus_aggregation_account_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteAggregationAccountUsingDeleteRequest($nucleus_aggregation_account_id)
    {
        // verify the required parameter 'nucleus_aggregation_account_id' is set
        if ($nucleus_aggregation_account_id === null || (is_array($nucleus_aggregation_account_id) && count($nucleus_aggregation_account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nucleus_aggregation_account_id when calling deleteAggregationAccountUsingDelete'
            );
        }

        $resourcePath = '/aggregation/account/{nucleus_aggregation_account_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($nucleus_aggregation_account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'nucleus_aggregation_account_id' . '}',
                ObjectSerializer::toPathValue($nucleus_aggregation_account_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAggregationAccountAllUsingGet
     *
     * Fetch all aggregation account(s) details with the mapping created in POST endpoint for a client
     *
     * @param  string[] $aggregation_account_id_list aggregation_account_id_list (required)
     *
     * @throws \com\hydrogen\integration\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \com\hydrogen\integration\Model\AggregationAccountResponseVO[]
     */
    public function getAggregationAccountAllUsingGet($aggregation_account_id_list)
    {
        list($response) = $this->getAggregationAccountAllUsingGetWithHttpInfo($aggregation_account_id_list);
        return $response;
    }

    /**
     * Operation getAggregationAccountAllUsingGetWithHttpInfo
     *
     * Fetch all aggregation account(s) details with the mapping created in POST endpoint for a client
     *
     * @param  string[] $aggregation_account_id_list aggregation_account_id_list (required)
     *
     * @throws \com\hydrogen\integration\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \com\hydrogen\integration\Model\AggregationAccountResponseVO[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getAggregationAccountAllUsingGetWithHttpInfo($aggregation_account_id_list)
    {
        $returnType = '\com\hydrogen\integration\Model\AggregationAccountResponseVO[]';
        $request = $this->getAggregationAccountAllUsingGetRequest($aggregation_account_id_list);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com\hydrogen\integration\Model\AggregationAccountResponseVO[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAggregationAccountAllUsingGetAsync
     *
     * Fetch all aggregation account(s) details with the mapping created in POST endpoint for a client
     *
     * @param  string[] $aggregation_account_id_list aggregation_account_id_list (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAggregationAccountAllUsingGetAsync($aggregation_account_id_list)
    {
        return $this->getAggregationAccountAllUsingGetAsyncWithHttpInfo($aggregation_account_id_list)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAggregationAccountAllUsingGetAsyncWithHttpInfo
     *
     * Fetch all aggregation account(s) details with the mapping created in POST endpoint for a client
     *
     * @param  string[] $aggregation_account_id_list aggregation_account_id_list (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAggregationAccountAllUsingGetAsyncWithHttpInfo($aggregation_account_id_list)
    {
        $returnType = '\com\hydrogen\integration\Model\AggregationAccountResponseVO[]';
        $request = $this->getAggregationAccountAllUsingGetRequest($aggregation_account_id_list);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAggregationAccountAllUsingGet'
     *
     * @param  string[] $aggregation_account_id_list aggregation_account_id_list (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAggregationAccountAllUsingGetRequest($aggregation_account_id_list)
    {
        // verify the required parameter 'aggregation_account_id_list' is set
        if ($aggregation_account_id_list === null || (is_array($aggregation_account_id_list) && count($aggregation_account_id_list) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $aggregation_account_id_list when calling getAggregationAccountAllUsingGet'
            );
        }

        $resourcePath = '/aggregation/account';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($aggregation_account_id_list)) {
            $queryParams['aggregation_account_id_list'] = $aggregation_account_id_list;
        } else
        if ($aggregation_account_id_list !== null) {
            $queryParams['aggregation_account_id_list'] = ObjectSerializer::toQueryValue($aggregation_account_id_list);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAggregationAccountBalanceAllUsingGet
     *
     * Fetch all aggregation account balance details with for the given aggregation accounts
     *
     * @param  string[] $aggregation_account_id_list aggregation_account_id_list (required)
     *
     * @throws \com\hydrogen\integration\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \com\hydrogen\integration\Model\AggregationAccountBalanceResponseVO[]
     */
    public function getAggregationAccountBalanceAllUsingGet($aggregation_account_id_list)
    {
        list($response) = $this->getAggregationAccountBalanceAllUsingGetWithHttpInfo($aggregation_account_id_list);
        return $response;
    }

    /**
     * Operation getAggregationAccountBalanceAllUsingGetWithHttpInfo
     *
     * Fetch all aggregation account balance details with for the given aggregation accounts
     *
     * @param  string[] $aggregation_account_id_list aggregation_account_id_list (required)
     *
     * @throws \com\hydrogen\integration\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \com\hydrogen\integration\Model\AggregationAccountBalanceResponseVO[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getAggregationAccountBalanceAllUsingGetWithHttpInfo($aggregation_account_id_list)
    {
        $returnType = '\com\hydrogen\integration\Model\AggregationAccountBalanceResponseVO[]';
        $request = $this->getAggregationAccountBalanceAllUsingGetRequest($aggregation_account_id_list);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com\hydrogen\integration\Model\AggregationAccountBalanceResponseVO[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAggregationAccountBalanceAllUsingGetAsync
     *
     * Fetch all aggregation account balance details with for the given aggregation accounts
     *
     * @param  string[] $aggregation_account_id_list aggregation_account_id_list (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAggregationAccountBalanceAllUsingGetAsync($aggregation_account_id_list)
    {
        return $this->getAggregationAccountBalanceAllUsingGetAsyncWithHttpInfo($aggregation_account_id_list)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAggregationAccountBalanceAllUsingGetAsyncWithHttpInfo
     *
     * Fetch all aggregation account balance details with for the given aggregation accounts
     *
     * @param  string[] $aggregation_account_id_list aggregation_account_id_list (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAggregationAccountBalanceAllUsingGetAsyncWithHttpInfo($aggregation_account_id_list)
    {
        $returnType = '\com\hydrogen\integration\Model\AggregationAccountBalanceResponseVO[]';
        $request = $this->getAggregationAccountBalanceAllUsingGetRequest($aggregation_account_id_list);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAggregationAccountBalanceAllUsingGet'
     *
     * @param  string[] $aggregation_account_id_list aggregation_account_id_list (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAggregationAccountBalanceAllUsingGetRequest($aggregation_account_id_list)
    {
        // verify the required parameter 'aggregation_account_id_list' is set
        if ($aggregation_account_id_list === null || (is_array($aggregation_account_id_list) && count($aggregation_account_id_list) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $aggregation_account_id_list when calling getAggregationAccountBalanceAllUsingGet'
            );
        }

        $resourcePath = '/aggregation/balance';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($aggregation_account_id_list)) {
            $queryParams['aggregation_account_id_list'] = $aggregation_account_id_list;
        } else
        if ($aggregation_account_id_list !== null) {
            $queryParams['aggregation_account_id_list'] = ObjectSerializer::toQueryValue($aggregation_account_id_list);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAggregationAccountBalanceUsingGet
     *
     * Fetch aggregation account balance details with the mapping created in POST endpoint
     *
     * @param  string $nucleus_aggregation_account_id nucleus_aggregation_account_id (required)
     *
     * @throws \com\hydrogen\integration\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \com\hydrogen\integration\Model\AggregationAccountBalanceResponseVO
     */
    public function getAggregationAccountBalanceUsingGet($nucleus_aggregation_account_id)
    {
        list($response) = $this->getAggregationAccountBalanceUsingGetWithHttpInfo($nucleus_aggregation_account_id);
        return $response;
    }

    /**
     * Operation getAggregationAccountBalanceUsingGetWithHttpInfo
     *
     * Fetch aggregation account balance details with the mapping created in POST endpoint
     *
     * @param  string $nucleus_aggregation_account_id nucleus_aggregation_account_id (required)
     *
     * @throws \com\hydrogen\integration\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \com\hydrogen\integration\Model\AggregationAccountBalanceResponseVO, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAggregationAccountBalanceUsingGetWithHttpInfo($nucleus_aggregation_account_id)
    {
        $returnType = '\com\hydrogen\integration\Model\AggregationAccountBalanceResponseVO';
        $request = $this->getAggregationAccountBalanceUsingGetRequest($nucleus_aggregation_account_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com\hydrogen\integration\Model\AggregationAccountBalanceResponseVO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAggregationAccountBalanceUsingGetAsync
     *
     * Fetch aggregation account balance details with the mapping created in POST endpoint
     *
     * @param  string $nucleus_aggregation_account_id nucleus_aggregation_account_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAggregationAccountBalanceUsingGetAsync($nucleus_aggregation_account_id)
    {
        return $this->getAggregationAccountBalanceUsingGetAsyncWithHttpInfo($nucleus_aggregation_account_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAggregationAccountBalanceUsingGetAsyncWithHttpInfo
     *
     * Fetch aggregation account balance details with the mapping created in POST endpoint
     *
     * @param  string $nucleus_aggregation_account_id nucleus_aggregation_account_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAggregationAccountBalanceUsingGetAsyncWithHttpInfo($nucleus_aggregation_account_id)
    {
        $returnType = '\com\hydrogen\integration\Model\AggregationAccountBalanceResponseVO';
        $request = $this->getAggregationAccountBalanceUsingGetRequest($nucleus_aggregation_account_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAggregationAccountBalanceUsingGet'
     *
     * @param  string $nucleus_aggregation_account_id nucleus_aggregation_account_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAggregationAccountBalanceUsingGetRequest($nucleus_aggregation_account_id)
    {
        // verify the required parameter 'nucleus_aggregation_account_id' is set
        if ($nucleus_aggregation_account_id === null || (is_array($nucleus_aggregation_account_id) && count($nucleus_aggregation_account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nucleus_aggregation_account_id when calling getAggregationAccountBalanceUsingGet'
            );
        }

        $resourcePath = '/aggregation/balance/{nucleus_aggregation_account_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($nucleus_aggregation_account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'nucleus_aggregation_account_id' . '}',
                ObjectSerializer::toPathValue($nucleus_aggregation_account_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAggregationAccountHoldingAllUsingGet
     *
     * Fetch all aggregation account(s) holding details with the mapping created in POST endpoint
     *
     * @param  string[] $aggregation_account_id_list aggregation_account_id_list (required)
     *
     * @throws \com\hydrogen\integration\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \com\hydrogen\integration\Model\AggregationAccountHoldingResponseVO[]
     */
    public function getAggregationAccountHoldingAllUsingGet($aggregation_account_id_list)
    {
        list($response) = $this->getAggregationAccountHoldingAllUsingGetWithHttpInfo($aggregation_account_id_list);
        return $response;
    }

    /**
     * Operation getAggregationAccountHoldingAllUsingGetWithHttpInfo
     *
     * Fetch all aggregation account(s) holding details with the mapping created in POST endpoint
     *
     * @param  string[] $aggregation_account_id_list aggregation_account_id_list (required)
     *
     * @throws \com\hydrogen\integration\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \com\hydrogen\integration\Model\AggregationAccountHoldingResponseVO[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getAggregationAccountHoldingAllUsingGetWithHttpInfo($aggregation_account_id_list)
    {
        $returnType = '\com\hydrogen\integration\Model\AggregationAccountHoldingResponseVO[]';
        $request = $this->getAggregationAccountHoldingAllUsingGetRequest($aggregation_account_id_list);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com\hydrogen\integration\Model\AggregationAccountHoldingResponseVO[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAggregationAccountHoldingAllUsingGetAsync
     *
     * Fetch all aggregation account(s) holding details with the mapping created in POST endpoint
     *
     * @param  string[] $aggregation_account_id_list aggregation_account_id_list (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAggregationAccountHoldingAllUsingGetAsync($aggregation_account_id_list)
    {
        return $this->getAggregationAccountHoldingAllUsingGetAsyncWithHttpInfo($aggregation_account_id_list)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAggregationAccountHoldingAllUsingGetAsyncWithHttpInfo
     *
     * Fetch all aggregation account(s) holding details with the mapping created in POST endpoint
     *
     * @param  string[] $aggregation_account_id_list aggregation_account_id_list (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAggregationAccountHoldingAllUsingGetAsyncWithHttpInfo($aggregation_account_id_list)
    {
        $returnType = '\com\hydrogen\integration\Model\AggregationAccountHoldingResponseVO[]';
        $request = $this->getAggregationAccountHoldingAllUsingGetRequest($aggregation_account_id_list);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAggregationAccountHoldingAllUsingGet'
     *
     * @param  string[] $aggregation_account_id_list aggregation_account_id_list (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAggregationAccountHoldingAllUsingGetRequest($aggregation_account_id_list)
    {
        // verify the required parameter 'aggregation_account_id_list' is set
        if ($aggregation_account_id_list === null || (is_array($aggregation_account_id_list) && count($aggregation_account_id_list) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $aggregation_account_id_list when calling getAggregationAccountHoldingAllUsingGet'
            );
        }

        $resourcePath = '/aggregation/holding';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($aggregation_account_id_list)) {
            $queryParams['aggregation_account_id_list'] = $aggregation_account_id_list;
        } else
        if ($aggregation_account_id_list !== null) {
            $queryParams['aggregation_account_id_list'] = ObjectSerializer::toQueryValue($aggregation_account_id_list);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAggregationAccountHoldingUsingGet
     *
     * Fetch aggregation account holding details with the mapping created in POST endpoint
     *
     * @param  string $nucleus_aggregation_account_id nucleus_aggregation_account_id (required)
     *
     * @throws \com\hydrogen\integration\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \com\hydrogen\integration\Model\AggregationAccountHoldingResponseVO
     */
    public function getAggregationAccountHoldingUsingGet($nucleus_aggregation_account_id)
    {
        list($response) = $this->getAggregationAccountHoldingUsingGetWithHttpInfo($nucleus_aggregation_account_id);
        return $response;
    }

    /**
     * Operation getAggregationAccountHoldingUsingGetWithHttpInfo
     *
     * Fetch aggregation account holding details with the mapping created in POST endpoint
     *
     * @param  string $nucleus_aggregation_account_id nucleus_aggregation_account_id (required)
     *
     * @throws \com\hydrogen\integration\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \com\hydrogen\integration\Model\AggregationAccountHoldingResponseVO, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAggregationAccountHoldingUsingGetWithHttpInfo($nucleus_aggregation_account_id)
    {
        $returnType = '\com\hydrogen\integration\Model\AggregationAccountHoldingResponseVO';
        $request = $this->getAggregationAccountHoldingUsingGetRequest($nucleus_aggregation_account_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com\hydrogen\integration\Model\AggregationAccountHoldingResponseVO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAggregationAccountHoldingUsingGetAsync
     *
     * Fetch aggregation account holding details with the mapping created in POST endpoint
     *
     * @param  string $nucleus_aggregation_account_id nucleus_aggregation_account_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAggregationAccountHoldingUsingGetAsync($nucleus_aggregation_account_id)
    {
        return $this->getAggregationAccountHoldingUsingGetAsyncWithHttpInfo($nucleus_aggregation_account_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAggregationAccountHoldingUsingGetAsyncWithHttpInfo
     *
     * Fetch aggregation account holding details with the mapping created in POST endpoint
     *
     * @param  string $nucleus_aggregation_account_id nucleus_aggregation_account_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAggregationAccountHoldingUsingGetAsyncWithHttpInfo($nucleus_aggregation_account_id)
    {
        $returnType = '\com\hydrogen\integration\Model\AggregationAccountHoldingResponseVO';
        $request = $this->getAggregationAccountHoldingUsingGetRequest($nucleus_aggregation_account_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAggregationAccountHoldingUsingGet'
     *
     * @param  string $nucleus_aggregation_account_id nucleus_aggregation_account_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAggregationAccountHoldingUsingGetRequest($nucleus_aggregation_account_id)
    {
        // verify the required parameter 'nucleus_aggregation_account_id' is set
        if ($nucleus_aggregation_account_id === null || (is_array($nucleus_aggregation_account_id) && count($nucleus_aggregation_account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nucleus_aggregation_account_id when calling getAggregationAccountHoldingUsingGet'
            );
        }

        $resourcePath = '/aggregation/holding/{nucleus_aggregation_account_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($nucleus_aggregation_account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'nucleus_aggregation_account_id' . '}',
                ObjectSerializer::toPathValue($nucleus_aggregation_account_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAggregationAccountTransactionAllUsingGet
     *
     * Fetch all aggregation account balance details with for the given aggregation accounts
     *
     * @param  string[] $aggregation_account_id_list aggregation_account_id_list (required)
     *
     * @throws \com\hydrogen\integration\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \com\hydrogen\integration\Model\AggregationAccountTransactionResponseVO[]
     */
    public function getAggregationAccountTransactionAllUsingGet($aggregation_account_id_list)
    {
        list($response) = $this->getAggregationAccountTransactionAllUsingGetWithHttpInfo($aggregation_account_id_list);
        return $response;
    }

    /**
     * Operation getAggregationAccountTransactionAllUsingGetWithHttpInfo
     *
     * Fetch all aggregation account balance details with for the given aggregation accounts
     *
     * @param  string[] $aggregation_account_id_list aggregation_account_id_list (required)
     *
     * @throws \com\hydrogen\integration\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \com\hydrogen\integration\Model\AggregationAccountTransactionResponseVO[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getAggregationAccountTransactionAllUsingGetWithHttpInfo($aggregation_account_id_list)
    {
        $returnType = '\com\hydrogen\integration\Model\AggregationAccountTransactionResponseVO[]';
        $request = $this->getAggregationAccountTransactionAllUsingGetRequest($aggregation_account_id_list);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com\hydrogen\integration\Model\AggregationAccountTransactionResponseVO[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAggregationAccountTransactionAllUsingGetAsync
     *
     * Fetch all aggregation account balance details with for the given aggregation accounts
     *
     * @param  string[] $aggregation_account_id_list aggregation_account_id_list (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAggregationAccountTransactionAllUsingGetAsync($aggregation_account_id_list)
    {
        return $this->getAggregationAccountTransactionAllUsingGetAsyncWithHttpInfo($aggregation_account_id_list)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAggregationAccountTransactionAllUsingGetAsyncWithHttpInfo
     *
     * Fetch all aggregation account balance details with for the given aggregation accounts
     *
     * @param  string[] $aggregation_account_id_list aggregation_account_id_list (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAggregationAccountTransactionAllUsingGetAsyncWithHttpInfo($aggregation_account_id_list)
    {
        $returnType = '\com\hydrogen\integration\Model\AggregationAccountTransactionResponseVO[]';
        $request = $this->getAggregationAccountTransactionAllUsingGetRequest($aggregation_account_id_list);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAggregationAccountTransactionAllUsingGet'
     *
     * @param  string[] $aggregation_account_id_list aggregation_account_id_list (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAggregationAccountTransactionAllUsingGetRequest($aggregation_account_id_list)
    {
        // verify the required parameter 'aggregation_account_id_list' is set
        if ($aggregation_account_id_list === null || (is_array($aggregation_account_id_list) && count($aggregation_account_id_list) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $aggregation_account_id_list when calling getAggregationAccountTransactionAllUsingGet'
            );
        }

        $resourcePath = '/aggregation/transaction';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($aggregation_account_id_list)) {
            $queryParams['aggregation_account_id_list'] = $aggregation_account_id_list;
        } else
        if ($aggregation_account_id_list !== null) {
            $queryParams['aggregation_account_id_list'] = ObjectSerializer::toQueryValue($aggregation_account_id_list);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAggregationAccountTransactionUsingGet
     *
     * Fetch aggregation account transaction details with the mapping created in POST endpoint
     *
     * @param  string $nucleus_aggregation_account_id nucleus_aggregation_account_id (required)
     *
     * @throws \com\hydrogen\integration\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \com\hydrogen\integration\Model\AggregationAccountTransactionResponseVO
     */
    public function getAggregationAccountTransactionUsingGet($nucleus_aggregation_account_id)
    {
        list($response) = $this->getAggregationAccountTransactionUsingGetWithHttpInfo($nucleus_aggregation_account_id);
        return $response;
    }

    /**
     * Operation getAggregationAccountTransactionUsingGetWithHttpInfo
     *
     * Fetch aggregation account transaction details with the mapping created in POST endpoint
     *
     * @param  string $nucleus_aggregation_account_id nucleus_aggregation_account_id (required)
     *
     * @throws \com\hydrogen\integration\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \com\hydrogen\integration\Model\AggregationAccountTransactionResponseVO, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAggregationAccountTransactionUsingGetWithHttpInfo($nucleus_aggregation_account_id)
    {
        $returnType = '\com\hydrogen\integration\Model\AggregationAccountTransactionResponseVO';
        $request = $this->getAggregationAccountTransactionUsingGetRequest($nucleus_aggregation_account_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com\hydrogen\integration\Model\AggregationAccountTransactionResponseVO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAggregationAccountTransactionUsingGetAsync
     *
     * Fetch aggregation account transaction details with the mapping created in POST endpoint
     *
     * @param  string $nucleus_aggregation_account_id nucleus_aggregation_account_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAggregationAccountTransactionUsingGetAsync($nucleus_aggregation_account_id)
    {
        return $this->getAggregationAccountTransactionUsingGetAsyncWithHttpInfo($nucleus_aggregation_account_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAggregationAccountTransactionUsingGetAsyncWithHttpInfo
     *
     * Fetch aggregation account transaction details with the mapping created in POST endpoint
     *
     * @param  string $nucleus_aggregation_account_id nucleus_aggregation_account_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAggregationAccountTransactionUsingGetAsyncWithHttpInfo($nucleus_aggregation_account_id)
    {
        $returnType = '\com\hydrogen\integration\Model\AggregationAccountTransactionResponseVO';
        $request = $this->getAggregationAccountTransactionUsingGetRequest($nucleus_aggregation_account_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAggregationAccountTransactionUsingGet'
     *
     * @param  string $nucleus_aggregation_account_id nucleus_aggregation_account_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAggregationAccountTransactionUsingGetRequest($nucleus_aggregation_account_id)
    {
        // verify the required parameter 'nucleus_aggregation_account_id' is set
        if ($nucleus_aggregation_account_id === null || (is_array($nucleus_aggregation_account_id) && count($nucleus_aggregation_account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nucleus_aggregation_account_id when calling getAggregationAccountTransactionUsingGet'
            );
        }

        $resourcePath = '/aggregation/transaction/{nucleus_aggregation_account_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($nucleus_aggregation_account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'nucleus_aggregation_account_id' . '}',
                ObjectSerializer::toPathValue($nucleus_aggregation_account_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAggregationAccountUsingGet
     *
     * Fetch aggregation account details with the mapping created in POST endpoint
     *
     * @param  string $nucleus_aggregation_account_id nucleus_aggregation_account_id (required)
     *
     * @throws \com\hydrogen\integration\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \com\hydrogen\integration\Model\AggregationAccountResponseVO
     */
    public function getAggregationAccountUsingGet($nucleus_aggregation_account_id)
    {
        list($response) = $this->getAggregationAccountUsingGetWithHttpInfo($nucleus_aggregation_account_id);
        return $response;
    }

    /**
     * Operation getAggregationAccountUsingGetWithHttpInfo
     *
     * Fetch aggregation account details with the mapping created in POST endpoint
     *
     * @param  string $nucleus_aggregation_account_id nucleus_aggregation_account_id (required)
     *
     * @throws \com\hydrogen\integration\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \com\hydrogen\integration\Model\AggregationAccountResponseVO, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAggregationAccountUsingGetWithHttpInfo($nucleus_aggregation_account_id)
    {
        $returnType = '\com\hydrogen\integration\Model\AggregationAccountResponseVO';
        $request = $this->getAggregationAccountUsingGetRequest($nucleus_aggregation_account_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com\hydrogen\integration\Model\AggregationAccountResponseVO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAggregationAccountUsingGetAsync
     *
     * Fetch aggregation account details with the mapping created in POST endpoint
     *
     * @param  string $nucleus_aggregation_account_id nucleus_aggregation_account_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAggregationAccountUsingGetAsync($nucleus_aggregation_account_id)
    {
        return $this->getAggregationAccountUsingGetAsyncWithHttpInfo($nucleus_aggregation_account_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAggregationAccountUsingGetAsyncWithHttpInfo
     *
     * Fetch aggregation account details with the mapping created in POST endpoint
     *
     * @param  string $nucleus_aggregation_account_id nucleus_aggregation_account_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAggregationAccountUsingGetAsyncWithHttpInfo($nucleus_aggregation_account_id)
    {
        $returnType = '\com\hydrogen\integration\Model\AggregationAccountResponseVO';
        $request = $this->getAggregationAccountUsingGetRequest($nucleus_aggregation_account_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAggregationAccountUsingGet'
     *
     * @param  string $nucleus_aggregation_account_id nucleus_aggregation_account_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAggregationAccountUsingGetRequest($nucleus_aggregation_account_id)
    {
        // verify the required parameter 'nucleus_aggregation_account_id' is set
        if ($nucleus_aggregation_account_id === null || (is_array($nucleus_aggregation_account_id) && count($nucleus_aggregation_account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nucleus_aggregation_account_id when calling getAggregationAccountUsingGet'
            );
        }

        $resourcePath = '/aggregation/account/{nucleus_aggregation_account_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($nucleus_aggregation_account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'nucleus_aggregation_account_id' . '}',
                ObjectSerializer::toPathValue($nucleus_aggregation_account_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPropertyValue
     *
     * Get Value of the given property
     *
     * @param  string $nucleus_aggregation_account_id nucleus_aggregation_account_id (required)
     * @param  string $nucleus_client_id nucleus_client_id (required)
     * @param  string $product product (optional, default to atom)
     *
     * @throws \com\hydrogen\integration\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \com\hydrogen\integration\Model\PropertyValueResponseVO
     */
    public function getPropertyValue($nucleus_aggregation_account_id, $nucleus_client_id, $product = 'atom')
    {
        list($response) = $this->getPropertyValueWithHttpInfo($nucleus_aggregation_account_id, $nucleus_client_id, $product);
        return $response;
    }

    /**
     * Operation getPropertyValueWithHttpInfo
     *
     * Get Value of the given property
     *
     * @param  string $nucleus_aggregation_account_id nucleus_aggregation_account_id (required)
     * @param  string $nucleus_client_id nucleus_client_id (required)
     * @param  string $product product (optional, default to atom)
     *
     * @throws \com\hydrogen\integration\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \com\hydrogen\integration\Model\PropertyValueResponseVO, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPropertyValueWithHttpInfo($nucleus_aggregation_account_id, $nucleus_client_id, $product = 'atom')
    {
        $returnType = '\com\hydrogen\integration\Model\PropertyValueResponseVO';
        $request = $this->getPropertyValueRequest($nucleus_aggregation_account_id, $nucleus_client_id, $product);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com\hydrogen\integration\Model\PropertyValueResponseVO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPropertyValueAsync
     *
     * Get Value of the given property
     *
     * @param  string $nucleus_aggregation_account_id nucleus_aggregation_account_id (required)
     * @param  string $nucleus_client_id nucleus_client_id (required)
     * @param  string $product product (optional, default to atom)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPropertyValueAsync($nucleus_aggregation_account_id, $nucleus_client_id, $product = 'atom')
    {
        return $this->getPropertyValueAsyncWithHttpInfo($nucleus_aggregation_account_id, $nucleus_client_id, $product)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPropertyValueAsyncWithHttpInfo
     *
     * Get Value of the given property
     *
     * @param  string $nucleus_aggregation_account_id nucleus_aggregation_account_id (required)
     * @param  string $nucleus_client_id nucleus_client_id (required)
     * @param  string $product product (optional, default to atom)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPropertyValueAsyncWithHttpInfo($nucleus_aggregation_account_id, $nucleus_client_id, $product = 'atom')
    {
        $returnType = '\com\hydrogen\integration\Model\PropertyValueResponseVO';
        $request = $this->getPropertyValueRequest($nucleus_aggregation_account_id, $nucleus_client_id, $product);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPropertyValue'
     *
     * @param  string $nucleus_aggregation_account_id nucleus_aggregation_account_id (required)
     * @param  string $nucleus_client_id nucleus_client_id (required)
     * @param  string $product product (optional, default to atom)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getPropertyValueRequest($nucleus_aggregation_account_id, $nucleus_client_id, $product = 'atom')
    {
        // verify the required parameter 'nucleus_aggregation_account_id' is set
        if ($nucleus_aggregation_account_id === null || (is_array($nucleus_aggregation_account_id) && count($nucleus_aggregation_account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nucleus_aggregation_account_id when calling getPropertyValue'
            );
        }
        // verify the required parameter 'nucleus_client_id' is set
        if ($nucleus_client_id === null || (is_array($nucleus_client_id) && count($nucleus_client_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nucleus_client_id when calling getPropertyValue'
            );
        }

        $resourcePath = '/property_value';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($nucleus_aggregation_account_id !== null) {
            $queryParams['nucleus_aggregation_account_id'] = ObjectSerializer::toQueryValue($nucleus_aggregation_account_id);
        }
        // query params
        if ($nucleus_client_id !== null) {
            $queryParams['nucleus_client_id'] = ObjectSerializer::toQueryValue($nucleus_client_id);
        }
        // query params
        if ($product !== null) {
            $queryParams['product'] = ObjectSerializer::toQueryValue($product);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
