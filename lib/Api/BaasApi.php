<?php
/**
 * BaasApi
 * PHP version 5
 *
 * @category Class
 * @package  com\hydrogen\integration
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Hydrogen Integration API
 *
 * The Hydrogen Integration API
 *
 * OpenAPI spec version: 1.2.1
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.18
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace com\hydrogen\integration\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use com\hydrogen\integration\ApiException;
use com\hydrogen\integration\Configuration;
use com\hydrogen\integration\HeaderSelector;
use com\hydrogen\integration\ObjectSerializer;

/**
 * BaasApi Class Doc Comment
 *
 * @category Class
 * @package  com\hydrogen\integration
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BaasApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createBaasAccountUsingPost
     *
     * create a Baas account
     *
     * @param  \com\hydrogen\integration\Model\BaasAccountCO $baas_account_co baasAccountCO (required)
     *
     * @throws \com\hydrogen\integration\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \com\hydrogen\integration\Model\BaasAccountVO
     */
    public function createBaasAccountUsingPost($baas_account_co)
    {
        list($response) = $this->createBaasAccountUsingPostWithHttpInfo($baas_account_co);
        return $response;
    }

    /**
     * Operation createBaasAccountUsingPostWithHttpInfo
     *
     * create a Baas account
     *
     * @param  \com\hydrogen\integration\Model\BaasAccountCO $baas_account_co baasAccountCO (required)
     *
     * @throws \com\hydrogen\integration\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \com\hydrogen\integration\Model\BaasAccountVO, HTTP status code, HTTP response headers (array of strings)
     */
    public function createBaasAccountUsingPostWithHttpInfo($baas_account_co)
    {
        $returnType = '\com\hydrogen\integration\Model\BaasAccountVO';
        $request = $this->createBaasAccountUsingPostRequest($baas_account_co);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com\hydrogen\integration\Model\BaasAccountVO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createBaasAccountUsingPostAsync
     *
     * create a Baas account
     *
     * @param  \com\hydrogen\integration\Model\BaasAccountCO $baas_account_co baasAccountCO (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createBaasAccountUsingPostAsync($baas_account_co)
    {
        return $this->createBaasAccountUsingPostAsyncWithHttpInfo($baas_account_co)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createBaasAccountUsingPostAsyncWithHttpInfo
     *
     * create a Baas account
     *
     * @param  \com\hydrogen\integration\Model\BaasAccountCO $baas_account_co baasAccountCO (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createBaasAccountUsingPostAsyncWithHttpInfo($baas_account_co)
    {
        $returnType = '\com\hydrogen\integration\Model\BaasAccountVO';
        $request = $this->createBaasAccountUsingPostRequest($baas_account_co);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createBaasAccountUsingPost'
     *
     * @param  \com\hydrogen\integration\Model\BaasAccountCO $baas_account_co baasAccountCO (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createBaasAccountUsingPostRequest($baas_account_co)
    {
        // verify the required parameter 'baas_account_co' is set
        if ($baas_account_co === null || (is_array($baas_account_co) && count($baas_account_co) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $baas_account_co when calling createBaasAccountUsingPost'
            );
        }

        $resourcePath = '/baas/account';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($baas_account_co)) {
            $_tempBody = $baas_account_co;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createBaasBusinessUsingPost
     *
     * Create a Baas Business
     *
     * @param  \com\hydrogen\integration\Model\CreateBaasBusinessCO $baas_business_co baasBusinessCO (required)
     *
     * @throws \com\hydrogen\integration\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \com\hydrogen\integration\Model\BaasBusinessVO
     */
    public function createBaasBusinessUsingPost($baas_business_co)
    {
        list($response) = $this->createBaasBusinessUsingPostWithHttpInfo($baas_business_co);
        return $response;
    }

    /**
     * Operation createBaasBusinessUsingPostWithHttpInfo
     *
     * Create a Baas Business
     *
     * @param  \com\hydrogen\integration\Model\CreateBaasBusinessCO $baas_business_co baasBusinessCO (required)
     *
     * @throws \com\hydrogen\integration\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \com\hydrogen\integration\Model\BaasBusinessVO, HTTP status code, HTTP response headers (array of strings)
     */
    public function createBaasBusinessUsingPostWithHttpInfo($baas_business_co)
    {
        $returnType = '\com\hydrogen\integration\Model\BaasBusinessVO';
        $request = $this->createBaasBusinessUsingPostRequest($baas_business_co);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com\hydrogen\integration\Model\BaasBusinessVO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createBaasBusinessUsingPostAsync
     *
     * Create a Baas Business
     *
     * @param  \com\hydrogen\integration\Model\CreateBaasBusinessCO $baas_business_co baasBusinessCO (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createBaasBusinessUsingPostAsync($baas_business_co)
    {
        return $this->createBaasBusinessUsingPostAsyncWithHttpInfo($baas_business_co)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createBaasBusinessUsingPostAsyncWithHttpInfo
     *
     * Create a Baas Business
     *
     * @param  \com\hydrogen\integration\Model\CreateBaasBusinessCO $baas_business_co baasBusinessCO (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createBaasBusinessUsingPostAsyncWithHttpInfo($baas_business_co)
    {
        $returnType = '\com\hydrogen\integration\Model\BaasBusinessVO';
        $request = $this->createBaasBusinessUsingPostRequest($baas_business_co);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createBaasBusinessUsingPost'
     *
     * @param  \com\hydrogen\integration\Model\CreateBaasBusinessCO $baas_business_co baasBusinessCO (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createBaasBusinessUsingPostRequest($baas_business_co)
    {
        // verify the required parameter 'baas_business_co' is set
        if ($baas_business_co === null || (is_array($baas_business_co) && count($baas_business_co) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $baas_business_co when calling createBaasBusinessUsingPost'
            );
        }

        $resourcePath = '/baas/business';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($baas_business_co)) {
            $_tempBody = $baas_business_co;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createBaasClientUsingPost
     *
     * Create a Baas Client
     *
     * @param  \com\hydrogen\integration\Model\CreateBaasClientCO $baas_client_co baasClientCO (required)
     *
     * @throws \com\hydrogen\integration\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \com\hydrogen\integration\Model\BaasClientVO
     */
    public function createBaasClientUsingPost($baas_client_co)
    {
        list($response) = $this->createBaasClientUsingPostWithHttpInfo($baas_client_co);
        return $response;
    }

    /**
     * Operation createBaasClientUsingPostWithHttpInfo
     *
     * Create a Baas Client
     *
     * @param  \com\hydrogen\integration\Model\CreateBaasClientCO $baas_client_co baasClientCO (required)
     *
     * @throws \com\hydrogen\integration\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \com\hydrogen\integration\Model\BaasClientVO, HTTP status code, HTTP response headers (array of strings)
     */
    public function createBaasClientUsingPostWithHttpInfo($baas_client_co)
    {
        $returnType = '\com\hydrogen\integration\Model\BaasClientVO';
        $request = $this->createBaasClientUsingPostRequest($baas_client_co);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com\hydrogen\integration\Model\BaasClientVO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createBaasClientUsingPostAsync
     *
     * Create a Baas Client
     *
     * @param  \com\hydrogen\integration\Model\CreateBaasClientCO $baas_client_co baasClientCO (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createBaasClientUsingPostAsync($baas_client_co)
    {
        return $this->createBaasClientUsingPostAsyncWithHttpInfo($baas_client_co)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createBaasClientUsingPostAsyncWithHttpInfo
     *
     * Create a Baas Client
     *
     * @param  \com\hydrogen\integration\Model\CreateBaasClientCO $baas_client_co baasClientCO (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createBaasClientUsingPostAsyncWithHttpInfo($baas_client_co)
    {
        $returnType = '\com\hydrogen\integration\Model\BaasClientVO';
        $request = $this->createBaasClientUsingPostRequest($baas_client_co);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createBaasClientUsingPost'
     *
     * @param  \com\hydrogen\integration\Model\CreateBaasClientCO $baas_client_co baasClientCO (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createBaasClientUsingPostRequest($baas_client_co)
    {
        // verify the required parameter 'baas_client_co' is set
        if ($baas_client_co === null || (is_array($baas_client_co) && count($baas_client_co) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $baas_client_co when calling createBaasClientUsingPost'
            );
        }

        $resourcePath = '/baas/client';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($baas_client_co)) {
            $_tempBody = $baas_client_co;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createBaasSubAccountUsingPost
     *
     * create a Baas subaccount
     *
     * @param  \com\hydrogen\integration\Model\BaasSubAccountCO $baas_sub_account_co baasSubAccountCO (required)
     *
     * @throws \com\hydrogen\integration\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \com\hydrogen\integration\Model\BaasSubAccountVO
     */
    public function createBaasSubAccountUsingPost($baas_sub_account_co)
    {
        list($response) = $this->createBaasSubAccountUsingPostWithHttpInfo($baas_sub_account_co);
        return $response;
    }

    /**
     * Operation createBaasSubAccountUsingPostWithHttpInfo
     *
     * create a Baas subaccount
     *
     * @param  \com\hydrogen\integration\Model\BaasSubAccountCO $baas_sub_account_co baasSubAccountCO (required)
     *
     * @throws \com\hydrogen\integration\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \com\hydrogen\integration\Model\BaasSubAccountVO, HTTP status code, HTTP response headers (array of strings)
     */
    public function createBaasSubAccountUsingPostWithHttpInfo($baas_sub_account_co)
    {
        $returnType = '\com\hydrogen\integration\Model\BaasSubAccountVO';
        $request = $this->createBaasSubAccountUsingPostRequest($baas_sub_account_co);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com\hydrogen\integration\Model\BaasSubAccountVO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createBaasSubAccountUsingPostAsync
     *
     * create a Baas subaccount
     *
     * @param  \com\hydrogen\integration\Model\BaasSubAccountCO $baas_sub_account_co baasSubAccountCO (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createBaasSubAccountUsingPostAsync($baas_sub_account_co)
    {
        return $this->createBaasSubAccountUsingPostAsyncWithHttpInfo($baas_sub_account_co)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createBaasSubAccountUsingPostAsyncWithHttpInfo
     *
     * create a Baas subaccount
     *
     * @param  \com\hydrogen\integration\Model\BaasSubAccountCO $baas_sub_account_co baasSubAccountCO (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createBaasSubAccountUsingPostAsyncWithHttpInfo($baas_sub_account_co)
    {
        $returnType = '\com\hydrogen\integration\Model\BaasSubAccountVO';
        $request = $this->createBaasSubAccountUsingPostRequest($baas_sub_account_co);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createBaasSubAccountUsingPost'
     *
     * @param  \com\hydrogen\integration\Model\BaasSubAccountCO $baas_sub_account_co baasSubAccountCO (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createBaasSubAccountUsingPostRequest($baas_sub_account_co)
    {
        // verify the required parameter 'baas_sub_account_co' is set
        if ($baas_sub_account_co === null || (is_array($baas_sub_account_co) && count($baas_sub_account_co) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $baas_sub_account_co when calling createBaasSubAccountUsingPost'
            );
        }

        $resourcePath = '/baas/subaccount';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($baas_sub_account_co)) {
            $_tempBody = $baas_sub_account_co;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getBaasAccountStatementUsingGet
     *
     * Get a Baas account statement
     *
     * @param  \DateTime $end_date end_date (required)
     * @param  string $nucleus_account_id nucleus_account_id (required)
     * @param  \DateTime $start_date start_date (required)
     * @param  string $statement_type statement_type (optional)
     *
     * @throws \com\hydrogen\integration\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \com\hydrogen\integration\Model\BaasStatementsVO
     */
    public function getBaasAccountStatementUsingGet($end_date, $nucleus_account_id, $start_date, $statement_type = null)
    {
        list($response) = $this->getBaasAccountStatementUsingGetWithHttpInfo($end_date, $nucleus_account_id, $start_date, $statement_type);
        return $response;
    }

    /**
     * Operation getBaasAccountStatementUsingGetWithHttpInfo
     *
     * Get a Baas account statement
     *
     * @param  \DateTime $end_date end_date (required)
     * @param  string $nucleus_account_id nucleus_account_id (required)
     * @param  \DateTime $start_date start_date (required)
     * @param  string $statement_type statement_type (optional)
     *
     * @throws \com\hydrogen\integration\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \com\hydrogen\integration\Model\BaasStatementsVO, HTTP status code, HTTP response headers (array of strings)
     */
    public function getBaasAccountStatementUsingGetWithHttpInfo($end_date, $nucleus_account_id, $start_date, $statement_type = null)
    {
        $returnType = '\com\hydrogen\integration\Model\BaasStatementsVO';
        $request = $this->getBaasAccountStatementUsingGetRequest($end_date, $nucleus_account_id, $start_date, $statement_type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com\hydrogen\integration\Model\BaasStatementsVO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getBaasAccountStatementUsingGetAsync
     *
     * Get a Baas account statement
     *
     * @param  \DateTime $end_date end_date (required)
     * @param  string $nucleus_account_id nucleus_account_id (required)
     * @param  \DateTime $start_date start_date (required)
     * @param  string $statement_type statement_type (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBaasAccountStatementUsingGetAsync($end_date, $nucleus_account_id, $start_date, $statement_type = null)
    {
        return $this->getBaasAccountStatementUsingGetAsyncWithHttpInfo($end_date, $nucleus_account_id, $start_date, $statement_type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getBaasAccountStatementUsingGetAsyncWithHttpInfo
     *
     * Get a Baas account statement
     *
     * @param  \DateTime $end_date end_date (required)
     * @param  string $nucleus_account_id nucleus_account_id (required)
     * @param  \DateTime $start_date start_date (required)
     * @param  string $statement_type statement_type (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBaasAccountStatementUsingGetAsyncWithHttpInfo($end_date, $nucleus_account_id, $start_date, $statement_type = null)
    {
        $returnType = '\com\hydrogen\integration\Model\BaasStatementsVO';
        $request = $this->getBaasAccountStatementUsingGetRequest($end_date, $nucleus_account_id, $start_date, $statement_type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getBaasAccountStatementUsingGet'
     *
     * @param  \DateTime $end_date end_date (required)
     * @param  string $nucleus_account_id nucleus_account_id (required)
     * @param  \DateTime $start_date start_date (required)
     * @param  string $statement_type statement_type (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getBaasAccountStatementUsingGetRequest($end_date, $nucleus_account_id, $start_date, $statement_type = null)
    {
        // verify the required parameter 'end_date' is set
        if ($end_date === null || (is_array($end_date) && count($end_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $end_date when calling getBaasAccountStatementUsingGet'
            );
        }
        // verify the required parameter 'nucleus_account_id' is set
        if ($nucleus_account_id === null || (is_array($nucleus_account_id) && count($nucleus_account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nucleus_account_id when calling getBaasAccountStatementUsingGet'
            );
        }
        // verify the required parameter 'start_date' is set
        if ($start_date === null || (is_array($start_date) && count($start_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $start_date when calling getBaasAccountStatementUsingGet'
            );
        }

        $resourcePath = '/baas/statement/{nucleus_account_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($end_date !== null) {
            $queryParams['end_date'] = ObjectSerializer::toQueryValue($end_date);
        }
        // query params
        if ($start_date !== null) {
            $queryParams['start_date'] = ObjectSerializer::toQueryValue($start_date);
        }
        // query params
        if ($statement_type !== null) {
            $queryParams['statement_type'] = ObjectSerializer::toQueryValue($statement_type);
        }

        // path params
        if ($nucleus_account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'nucleus_account_id' . '}',
                ObjectSerializer::toPathValue($nucleus_account_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getBaasPortfolioBalanceUsingGet
     *
     * Get a Baas portfolio balance
     *
     * @param  string $nucleus_portfolio_id nucleus_portfolio_id (required)
     * @param  \DateTime $end_date end_date (optional)
     * @param  \DateTime $start_date start_date (optional)
     *
     * @throws \com\hydrogen\integration\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \com\hydrogen\integration\Model\BaasBalanceVO
     */
    public function getBaasPortfolioBalanceUsingGet($nucleus_portfolio_id, $end_date = null, $start_date = null)
    {
        list($response) = $this->getBaasPortfolioBalanceUsingGetWithHttpInfo($nucleus_portfolio_id, $end_date, $start_date);
        return $response;
    }

    /**
     * Operation getBaasPortfolioBalanceUsingGetWithHttpInfo
     *
     * Get a Baas portfolio balance
     *
     * @param  string $nucleus_portfolio_id nucleus_portfolio_id (required)
     * @param  \DateTime $end_date end_date (optional)
     * @param  \DateTime $start_date start_date (optional)
     *
     * @throws \com\hydrogen\integration\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \com\hydrogen\integration\Model\BaasBalanceVO, HTTP status code, HTTP response headers (array of strings)
     */
    public function getBaasPortfolioBalanceUsingGetWithHttpInfo($nucleus_portfolio_id, $end_date = null, $start_date = null)
    {
        $returnType = '\com\hydrogen\integration\Model\BaasBalanceVO';
        $request = $this->getBaasPortfolioBalanceUsingGetRequest($nucleus_portfolio_id, $end_date, $start_date);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com\hydrogen\integration\Model\BaasBalanceVO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getBaasPortfolioBalanceUsingGetAsync
     *
     * Get a Baas portfolio balance
     *
     * @param  string $nucleus_portfolio_id nucleus_portfolio_id (required)
     * @param  \DateTime $end_date end_date (optional)
     * @param  \DateTime $start_date start_date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBaasPortfolioBalanceUsingGetAsync($nucleus_portfolio_id, $end_date = null, $start_date = null)
    {
        return $this->getBaasPortfolioBalanceUsingGetAsyncWithHttpInfo($nucleus_portfolio_id, $end_date, $start_date)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getBaasPortfolioBalanceUsingGetAsyncWithHttpInfo
     *
     * Get a Baas portfolio balance
     *
     * @param  string $nucleus_portfolio_id nucleus_portfolio_id (required)
     * @param  \DateTime $end_date end_date (optional)
     * @param  \DateTime $start_date start_date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBaasPortfolioBalanceUsingGetAsyncWithHttpInfo($nucleus_portfolio_id, $end_date = null, $start_date = null)
    {
        $returnType = '\com\hydrogen\integration\Model\BaasBalanceVO';
        $request = $this->getBaasPortfolioBalanceUsingGetRequest($nucleus_portfolio_id, $end_date, $start_date);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getBaasPortfolioBalanceUsingGet'
     *
     * @param  string $nucleus_portfolio_id nucleus_portfolio_id (required)
     * @param  \DateTime $end_date end_date (optional)
     * @param  \DateTime $start_date start_date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getBaasPortfolioBalanceUsingGetRequest($nucleus_portfolio_id, $end_date = null, $start_date = null)
    {
        // verify the required parameter 'nucleus_portfolio_id' is set
        if ($nucleus_portfolio_id === null || (is_array($nucleus_portfolio_id) && count($nucleus_portfolio_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nucleus_portfolio_id when calling getBaasPortfolioBalanceUsingGet'
            );
        }

        $resourcePath = '/baas/balance/{nucleus_portfolio_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($end_date !== null) {
            $queryParams['end_date'] = ObjectSerializer::toQueryValue($end_date);
        }
        // query params
        if ($start_date !== null) {
            $queryParams['start_date'] = ObjectSerializer::toQueryValue($start_date);
        }

        // path params
        if ($nucleus_portfolio_id !== null) {
            $resourcePath = str_replace(
                '{' . 'nucleus_portfolio_id' . '}',
                ObjectSerializer::toPathValue($nucleus_portfolio_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getBaasPortfolioTransactionUsingGet
     *
     * Get a Baas portfolio transaction
     *
     * @param  string $nucleus_portfolio_id nucleus_portfolio_id (required)
     * @param  \DateTime $end_date end_date (optional)
     * @param  \DateTime $start_date start_date (optional)
     *
     * @throws \com\hydrogen\integration\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \com\hydrogen\integration\Model\BaasTransactionsVO
     */
    public function getBaasPortfolioTransactionUsingGet($nucleus_portfolio_id, $end_date = null, $start_date = null)
    {
        list($response) = $this->getBaasPortfolioTransactionUsingGetWithHttpInfo($nucleus_portfolio_id, $end_date, $start_date);
        return $response;
    }

    /**
     * Operation getBaasPortfolioTransactionUsingGetWithHttpInfo
     *
     * Get a Baas portfolio transaction
     *
     * @param  string $nucleus_portfolio_id nucleus_portfolio_id (required)
     * @param  \DateTime $end_date end_date (optional)
     * @param  \DateTime $start_date start_date (optional)
     *
     * @throws \com\hydrogen\integration\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \com\hydrogen\integration\Model\BaasTransactionsVO, HTTP status code, HTTP response headers (array of strings)
     */
    public function getBaasPortfolioTransactionUsingGetWithHttpInfo($nucleus_portfolio_id, $end_date = null, $start_date = null)
    {
        $returnType = '\com\hydrogen\integration\Model\BaasTransactionsVO';
        $request = $this->getBaasPortfolioTransactionUsingGetRequest($nucleus_portfolio_id, $end_date, $start_date);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com\hydrogen\integration\Model\BaasTransactionsVO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getBaasPortfolioTransactionUsingGetAsync
     *
     * Get a Baas portfolio transaction
     *
     * @param  string $nucleus_portfolio_id nucleus_portfolio_id (required)
     * @param  \DateTime $end_date end_date (optional)
     * @param  \DateTime $start_date start_date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBaasPortfolioTransactionUsingGetAsync($nucleus_portfolio_id, $end_date = null, $start_date = null)
    {
        return $this->getBaasPortfolioTransactionUsingGetAsyncWithHttpInfo($nucleus_portfolio_id, $end_date, $start_date)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getBaasPortfolioTransactionUsingGetAsyncWithHttpInfo
     *
     * Get a Baas portfolio transaction
     *
     * @param  string $nucleus_portfolio_id nucleus_portfolio_id (required)
     * @param  \DateTime $end_date end_date (optional)
     * @param  \DateTime $start_date start_date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBaasPortfolioTransactionUsingGetAsyncWithHttpInfo($nucleus_portfolio_id, $end_date = null, $start_date = null)
    {
        $returnType = '\com\hydrogen\integration\Model\BaasTransactionsVO';
        $request = $this->getBaasPortfolioTransactionUsingGetRequest($nucleus_portfolio_id, $end_date, $start_date);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getBaasPortfolioTransactionUsingGet'
     *
     * @param  string $nucleus_portfolio_id nucleus_portfolio_id (required)
     * @param  \DateTime $end_date end_date (optional)
     * @param  \DateTime $start_date start_date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getBaasPortfolioTransactionUsingGetRequest($nucleus_portfolio_id, $end_date = null, $start_date = null)
    {
        // verify the required parameter 'nucleus_portfolio_id' is set
        if ($nucleus_portfolio_id === null || (is_array($nucleus_portfolio_id) && count($nucleus_portfolio_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nucleus_portfolio_id when calling getBaasPortfolioTransactionUsingGet'
            );
        }

        $resourcePath = '/baas/transaction/{nucleus_portfolio_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($end_date !== null) {
            $queryParams['end_date'] = ObjectSerializer::toQueryValue($end_date);
        }
        // query params
        if ($start_date !== null) {
            $queryParams['start_date'] = ObjectSerializer::toQueryValue($start_date);
        }

        // path params
        if ($nucleus_portfolio_id !== null) {
            $resourcePath = str_replace(
                '{' . 'nucleus_portfolio_id' . '}',
                ObjectSerializer::toPathValue($nucleus_portfolio_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateBaasBusinessUsingPut
     *
     * Update a Baas business
     *
     * @param  string $nucleus_business_id nucleus_business_id (required)
     * @param  \com\hydrogen\integration\Model\UpdateBaasBusinessCO $baas_business_co baasBusinessCO (optional)
     *
     * @throws \com\hydrogen\integration\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \com\hydrogen\integration\Model\BaasBusinessVO
     */
    public function updateBaasBusinessUsingPut($nucleus_business_id, $baas_business_co = null)
    {
        list($response) = $this->updateBaasBusinessUsingPutWithHttpInfo($nucleus_business_id, $baas_business_co);
        return $response;
    }

    /**
     * Operation updateBaasBusinessUsingPutWithHttpInfo
     *
     * Update a Baas business
     *
     * @param  string $nucleus_business_id nucleus_business_id (required)
     * @param  \com\hydrogen\integration\Model\UpdateBaasBusinessCO $baas_business_co baasBusinessCO (optional)
     *
     * @throws \com\hydrogen\integration\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \com\hydrogen\integration\Model\BaasBusinessVO, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateBaasBusinessUsingPutWithHttpInfo($nucleus_business_id, $baas_business_co = null)
    {
        $returnType = '\com\hydrogen\integration\Model\BaasBusinessVO';
        $request = $this->updateBaasBusinessUsingPutRequest($nucleus_business_id, $baas_business_co);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com\hydrogen\integration\Model\BaasBusinessVO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateBaasBusinessUsingPutAsync
     *
     * Update a Baas business
     *
     * @param  string $nucleus_business_id nucleus_business_id (required)
     * @param  \com\hydrogen\integration\Model\UpdateBaasBusinessCO $baas_business_co baasBusinessCO (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateBaasBusinessUsingPutAsync($nucleus_business_id, $baas_business_co = null)
    {
        return $this->updateBaasBusinessUsingPutAsyncWithHttpInfo($nucleus_business_id, $baas_business_co)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateBaasBusinessUsingPutAsyncWithHttpInfo
     *
     * Update a Baas business
     *
     * @param  string $nucleus_business_id nucleus_business_id (required)
     * @param  \com\hydrogen\integration\Model\UpdateBaasBusinessCO $baas_business_co baasBusinessCO (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateBaasBusinessUsingPutAsyncWithHttpInfo($nucleus_business_id, $baas_business_co = null)
    {
        $returnType = '\com\hydrogen\integration\Model\BaasBusinessVO';
        $request = $this->updateBaasBusinessUsingPutRequest($nucleus_business_id, $baas_business_co);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateBaasBusinessUsingPut'
     *
     * @param  string $nucleus_business_id nucleus_business_id (required)
     * @param  \com\hydrogen\integration\Model\UpdateBaasBusinessCO $baas_business_co baasBusinessCO (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateBaasBusinessUsingPutRequest($nucleus_business_id, $baas_business_co = null)
    {
        // verify the required parameter 'nucleus_business_id' is set
        if ($nucleus_business_id === null || (is_array($nucleus_business_id) && count($nucleus_business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nucleus_business_id when calling updateBaasBusinessUsingPut'
            );
        }

        $resourcePath = '/baas/business/{nucleus_business_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($nucleus_business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'nucleus_business_id' . '}',
                ObjectSerializer::toPathValue($nucleus_business_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($baas_business_co)) {
            $_tempBody = $baas_business_co;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateBaasClientUsingPut
     *
     * Update a Baas client
     *
     * @param  string $nucleus_client_id nucleus_client_id (required)
     * @param  \com\hydrogen\integration\Model\UpdateBaasClientCO $baas_client_co baasClientCO (optional)
     *
     * @throws \com\hydrogen\integration\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \com\hydrogen\integration\Model\BaasClientVO
     */
    public function updateBaasClientUsingPut($nucleus_client_id, $baas_client_co = null)
    {
        list($response) = $this->updateBaasClientUsingPutWithHttpInfo($nucleus_client_id, $baas_client_co);
        return $response;
    }

    /**
     * Operation updateBaasClientUsingPutWithHttpInfo
     *
     * Update a Baas client
     *
     * @param  string $nucleus_client_id nucleus_client_id (required)
     * @param  \com\hydrogen\integration\Model\UpdateBaasClientCO $baas_client_co baasClientCO (optional)
     *
     * @throws \com\hydrogen\integration\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \com\hydrogen\integration\Model\BaasClientVO, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateBaasClientUsingPutWithHttpInfo($nucleus_client_id, $baas_client_co = null)
    {
        $returnType = '\com\hydrogen\integration\Model\BaasClientVO';
        $request = $this->updateBaasClientUsingPutRequest($nucleus_client_id, $baas_client_co);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com\hydrogen\integration\Model\BaasClientVO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateBaasClientUsingPutAsync
     *
     * Update a Baas client
     *
     * @param  string $nucleus_client_id nucleus_client_id (required)
     * @param  \com\hydrogen\integration\Model\UpdateBaasClientCO $baas_client_co baasClientCO (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateBaasClientUsingPutAsync($nucleus_client_id, $baas_client_co = null)
    {
        return $this->updateBaasClientUsingPutAsyncWithHttpInfo($nucleus_client_id, $baas_client_co)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateBaasClientUsingPutAsyncWithHttpInfo
     *
     * Update a Baas client
     *
     * @param  string $nucleus_client_id nucleus_client_id (required)
     * @param  \com\hydrogen\integration\Model\UpdateBaasClientCO $baas_client_co baasClientCO (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateBaasClientUsingPutAsyncWithHttpInfo($nucleus_client_id, $baas_client_co = null)
    {
        $returnType = '\com\hydrogen\integration\Model\BaasClientVO';
        $request = $this->updateBaasClientUsingPutRequest($nucleus_client_id, $baas_client_co);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateBaasClientUsingPut'
     *
     * @param  string $nucleus_client_id nucleus_client_id (required)
     * @param  \com\hydrogen\integration\Model\UpdateBaasClientCO $baas_client_co baasClientCO (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateBaasClientUsingPutRequest($nucleus_client_id, $baas_client_co = null)
    {
        // verify the required parameter 'nucleus_client_id' is set
        if ($nucleus_client_id === null || (is_array($nucleus_client_id) && count($nucleus_client_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nucleus_client_id when calling updateBaasClientUsingPut'
            );
        }

        $resourcePath = '/baas/client/{nucleus_client_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($nucleus_client_id !== null) {
            $resourcePath = str_replace(
                '{' . 'nucleus_client_id' . '}',
                ObjectSerializer::toPathValue($nucleus_client_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($baas_client_co)) {
            $_tempBody = $baas_client_co;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
