<?php
/**
 * BrokerageApi
 * PHP version 5
 *
 * @category Class
 * @package  com\hydrogen\integration
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Hydrogen Integration API
 *
 * The Hydrogen Integration API
 *
 * OpenAPI spec version: 1.2.1
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.18
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace com\hydrogen\integration\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use com\hydrogen\integration\ApiException;
use com\hydrogen\integration\Configuration;
use com\hydrogen\integration\HeaderSelector;
use com\hydrogen\integration\ObjectSerializer;

/**
 * BrokerageApi Class Doc Comment
 *
 * @category Class
 * @package  com\hydrogen\integration
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BrokerageApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation cancelOrderUsingPut
     *
     * Cancel an Order
     *
     * @param  string $nucleus_order_id nucleus_order_id (required)
     *
     * @throws \com\hydrogen\integration\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function cancelOrderUsingPut($nucleus_order_id)
    {
        $this->cancelOrderUsingPutWithHttpInfo($nucleus_order_id);
    }

    /**
     * Operation cancelOrderUsingPutWithHttpInfo
     *
     * Cancel an Order
     *
     * @param  string $nucleus_order_id nucleus_order_id (required)
     *
     * @throws \com\hydrogen\integration\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function cancelOrderUsingPutWithHttpInfo($nucleus_order_id)
    {
        $returnType = '';
        $request = $this->cancelOrderUsingPutRequest($nucleus_order_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation cancelOrderUsingPutAsync
     *
     * Cancel an Order
     *
     * @param  string $nucleus_order_id nucleus_order_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelOrderUsingPutAsync($nucleus_order_id)
    {
        return $this->cancelOrderUsingPutAsyncWithHttpInfo($nucleus_order_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cancelOrderUsingPutAsyncWithHttpInfo
     *
     * Cancel an Order
     *
     * @param  string $nucleus_order_id nucleus_order_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelOrderUsingPutAsyncWithHttpInfo($nucleus_order_id)
    {
        $returnType = '';
        $request = $this->cancelOrderUsingPutRequest($nucleus_order_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cancelOrderUsingPut'
     *
     * @param  string $nucleus_order_id nucleus_order_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cancelOrderUsingPutRequest($nucleus_order_id)
    {
        // verify the required parameter 'nucleus_order_id' is set
        if ($nucleus_order_id === null || (is_array($nucleus_order_id) && count($nucleus_order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nucleus_order_id when calling cancelOrderUsingPut'
            );
        }

        $resourcePath = '/brokerage/order/{nucleus_order_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($nucleus_order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'nucleus_order_id' . '}',
                ObjectSerializer::toPathValue($nucleus_order_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createBankLinkUsingPost1
     *
     * create a Bank Link
     *
     * @param  \com\hydrogen\integration\Model\BrokerageBankLinkCO $brokerage_bank_link_co brokerageBankLinkCO (required)
     *
     * @throws \com\hydrogen\integration\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \com\hydrogen\integration\Model\BrokerageBankLinkVO
     */
    public function createBankLinkUsingPost1($brokerage_bank_link_co)
    {
        list($response) = $this->createBankLinkUsingPost1WithHttpInfo($brokerage_bank_link_co);
        return $response;
    }

    /**
     * Operation createBankLinkUsingPost1WithHttpInfo
     *
     * create a Bank Link
     *
     * @param  \com\hydrogen\integration\Model\BrokerageBankLinkCO $brokerage_bank_link_co brokerageBankLinkCO (required)
     *
     * @throws \com\hydrogen\integration\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \com\hydrogen\integration\Model\BrokerageBankLinkVO, HTTP status code, HTTP response headers (array of strings)
     */
    public function createBankLinkUsingPost1WithHttpInfo($brokerage_bank_link_co)
    {
        $returnType = '\com\hydrogen\integration\Model\BrokerageBankLinkVO';
        $request = $this->createBankLinkUsingPost1Request($brokerage_bank_link_co);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com\hydrogen\integration\Model\BrokerageBankLinkVO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createBankLinkUsingPost1Async
     *
     * create a Bank Link
     *
     * @param  \com\hydrogen\integration\Model\BrokerageBankLinkCO $brokerage_bank_link_co brokerageBankLinkCO (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createBankLinkUsingPost1Async($brokerage_bank_link_co)
    {
        return $this->createBankLinkUsingPost1AsyncWithHttpInfo($brokerage_bank_link_co)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createBankLinkUsingPost1AsyncWithHttpInfo
     *
     * create a Bank Link
     *
     * @param  \com\hydrogen\integration\Model\BrokerageBankLinkCO $brokerage_bank_link_co brokerageBankLinkCO (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createBankLinkUsingPost1AsyncWithHttpInfo($brokerage_bank_link_co)
    {
        $returnType = '\com\hydrogen\integration\Model\BrokerageBankLinkVO';
        $request = $this->createBankLinkUsingPost1Request($brokerage_bank_link_co);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createBankLinkUsingPost1'
     *
     * @param  \com\hydrogen\integration\Model\BrokerageBankLinkCO $brokerage_bank_link_co brokerageBankLinkCO (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createBankLinkUsingPost1Request($brokerage_bank_link_co)
    {
        // verify the required parameter 'brokerage_bank_link_co' is set
        if ($brokerage_bank_link_co === null || (is_array($brokerage_bank_link_co) && count($brokerage_bank_link_co) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $brokerage_bank_link_co when calling createBankLinkUsingPost1'
            );
        }

        $resourcePath = '/brokerage/bank_link';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($brokerage_bank_link_co)) {
            $_tempBody = $brokerage_bank_link_co;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createBrokerageAccountUsingPost
     *
     * create a Brokerage account
     *
     * @param  \com\hydrogen\integration\Model\BrokerageAccountCO $brokerage_account_co brokerageAccountCO (required)
     *
     * @throws \com\hydrogen\integration\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \com\hydrogen\integration\Model\BrokerageAccountVO
     */
    public function createBrokerageAccountUsingPost($brokerage_account_co)
    {
        list($response) = $this->createBrokerageAccountUsingPostWithHttpInfo($brokerage_account_co);
        return $response;
    }

    /**
     * Operation createBrokerageAccountUsingPostWithHttpInfo
     *
     * create a Brokerage account
     *
     * @param  \com\hydrogen\integration\Model\BrokerageAccountCO $brokerage_account_co brokerageAccountCO (required)
     *
     * @throws \com\hydrogen\integration\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \com\hydrogen\integration\Model\BrokerageAccountVO, HTTP status code, HTTP response headers (array of strings)
     */
    public function createBrokerageAccountUsingPostWithHttpInfo($brokerage_account_co)
    {
        $returnType = '\com\hydrogen\integration\Model\BrokerageAccountVO';
        $request = $this->createBrokerageAccountUsingPostRequest($brokerage_account_co);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com\hydrogen\integration\Model\BrokerageAccountVO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createBrokerageAccountUsingPostAsync
     *
     * create a Brokerage account
     *
     * @param  \com\hydrogen\integration\Model\BrokerageAccountCO $brokerage_account_co brokerageAccountCO (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createBrokerageAccountUsingPostAsync($brokerage_account_co)
    {
        return $this->createBrokerageAccountUsingPostAsyncWithHttpInfo($brokerage_account_co)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createBrokerageAccountUsingPostAsyncWithHttpInfo
     *
     * create a Brokerage account
     *
     * @param  \com\hydrogen\integration\Model\BrokerageAccountCO $brokerage_account_co brokerageAccountCO (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createBrokerageAccountUsingPostAsyncWithHttpInfo($brokerage_account_co)
    {
        $returnType = '\com\hydrogen\integration\Model\BrokerageAccountVO';
        $request = $this->createBrokerageAccountUsingPostRequest($brokerage_account_co);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createBrokerageAccountUsingPost'
     *
     * @param  \com\hydrogen\integration\Model\BrokerageAccountCO $brokerage_account_co brokerageAccountCO (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createBrokerageAccountUsingPostRequest($brokerage_account_co)
    {
        // verify the required parameter 'brokerage_account_co' is set
        if ($brokerage_account_co === null || (is_array($brokerage_account_co) && count($brokerage_account_co) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $brokerage_account_co when calling createBrokerageAccountUsingPost'
            );
        }

        $resourcePath = '/brokerage/account';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($brokerage_account_co)) {
            $_tempBody = $brokerage_account_co;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createBrokerageClientUsingPost
     *
     * Create a Brokerage Client
     *
     * @param  \com\hydrogen\integration\Model\BrokerageClientCO $client_co clientCO (required)
     *
     * @throws \com\hydrogen\integration\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \com\hydrogen\integration\Model\BrokerageCreateClientVO
     */
    public function createBrokerageClientUsingPost($client_co)
    {
        list($response) = $this->createBrokerageClientUsingPostWithHttpInfo($client_co);
        return $response;
    }

    /**
     * Operation createBrokerageClientUsingPostWithHttpInfo
     *
     * Create a Brokerage Client
     *
     * @param  \com\hydrogen\integration\Model\BrokerageClientCO $client_co clientCO (required)
     *
     * @throws \com\hydrogen\integration\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \com\hydrogen\integration\Model\BrokerageCreateClientVO, HTTP status code, HTTP response headers (array of strings)
     */
    public function createBrokerageClientUsingPostWithHttpInfo($client_co)
    {
        $returnType = '\com\hydrogen\integration\Model\BrokerageCreateClientVO';
        $request = $this->createBrokerageClientUsingPostRequest($client_co);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com\hydrogen\integration\Model\BrokerageCreateClientVO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createBrokerageClientUsingPostAsync
     *
     * Create a Brokerage Client
     *
     * @param  \com\hydrogen\integration\Model\BrokerageClientCO $client_co clientCO (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createBrokerageClientUsingPostAsync($client_co)
    {
        return $this->createBrokerageClientUsingPostAsyncWithHttpInfo($client_co)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createBrokerageClientUsingPostAsyncWithHttpInfo
     *
     * Create a Brokerage Client
     *
     * @param  \com\hydrogen\integration\Model\BrokerageClientCO $client_co clientCO (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createBrokerageClientUsingPostAsyncWithHttpInfo($client_co)
    {
        $returnType = '\com\hydrogen\integration\Model\BrokerageCreateClientVO';
        $request = $this->createBrokerageClientUsingPostRequest($client_co);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createBrokerageClientUsingPost'
     *
     * @param  \com\hydrogen\integration\Model\BrokerageClientCO $client_co clientCO (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createBrokerageClientUsingPostRequest($client_co)
    {
        // verify the required parameter 'client_co' is set
        if ($client_co === null || (is_array($client_co) && count($client_co) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_co when calling createBrokerageClientUsingPost'
            );
        }

        $resourcePath = '/brokerage/client';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($client_co)) {
            $_tempBody = $client_co;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createDepositUsingPost
     *
     * Create a deposit
     *
     * @param  \com\hydrogen\integration\Model\BrokerageDepositCO $brokerage_deposit_co brokerageDepositCO (required)
     *
     * @throws \com\hydrogen\integration\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \com\hydrogen\integration\Model\BrokerageDepositVO
     */
    public function createDepositUsingPost($brokerage_deposit_co)
    {
        list($response) = $this->createDepositUsingPostWithHttpInfo($brokerage_deposit_co);
        return $response;
    }

    /**
     * Operation createDepositUsingPostWithHttpInfo
     *
     * Create a deposit
     *
     * @param  \com\hydrogen\integration\Model\BrokerageDepositCO $brokerage_deposit_co brokerageDepositCO (required)
     *
     * @throws \com\hydrogen\integration\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \com\hydrogen\integration\Model\BrokerageDepositVO, HTTP status code, HTTP response headers (array of strings)
     */
    public function createDepositUsingPostWithHttpInfo($brokerage_deposit_co)
    {
        $returnType = '\com\hydrogen\integration\Model\BrokerageDepositVO';
        $request = $this->createDepositUsingPostRequest($brokerage_deposit_co);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com\hydrogen\integration\Model\BrokerageDepositVO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createDepositUsingPostAsync
     *
     * Create a deposit
     *
     * @param  \com\hydrogen\integration\Model\BrokerageDepositCO $brokerage_deposit_co brokerageDepositCO (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createDepositUsingPostAsync($brokerage_deposit_co)
    {
        return $this->createDepositUsingPostAsyncWithHttpInfo($brokerage_deposit_co)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createDepositUsingPostAsyncWithHttpInfo
     *
     * Create a deposit
     *
     * @param  \com\hydrogen\integration\Model\BrokerageDepositCO $brokerage_deposit_co brokerageDepositCO (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createDepositUsingPostAsyncWithHttpInfo($brokerage_deposit_co)
    {
        $returnType = '\com\hydrogen\integration\Model\BrokerageDepositVO';
        $request = $this->createDepositUsingPostRequest($brokerage_deposit_co);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createDepositUsingPost'
     *
     * @param  \com\hydrogen\integration\Model\BrokerageDepositCO $brokerage_deposit_co brokerageDepositCO (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createDepositUsingPostRequest($brokerage_deposit_co)
    {
        // verify the required parameter 'brokerage_deposit_co' is set
        if ($brokerage_deposit_co === null || (is_array($brokerage_deposit_co) && count($brokerage_deposit_co) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $brokerage_deposit_co when calling createDepositUsingPost'
            );
        }

        $resourcePath = '/brokerage/deposit';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($brokerage_deposit_co)) {
            $_tempBody = $brokerage_deposit_co;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createDocumentUsingPost
     *
     * Create a Brokerage document
     *
     * @param  \com\hydrogen\integration\Model\BrokerageDocumentCO $document_co documentCO (required)
     *
     * @throws \com\hydrogen\integration\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \com\hydrogen\integration\Model\BrokerageDocumentVO
     */
    public function createDocumentUsingPost($document_co)
    {
        list($response) = $this->createDocumentUsingPostWithHttpInfo($document_co);
        return $response;
    }

    /**
     * Operation createDocumentUsingPostWithHttpInfo
     *
     * Create a Brokerage document
     *
     * @param  \com\hydrogen\integration\Model\BrokerageDocumentCO $document_co documentCO (required)
     *
     * @throws \com\hydrogen\integration\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \com\hydrogen\integration\Model\BrokerageDocumentVO, HTTP status code, HTTP response headers (array of strings)
     */
    public function createDocumentUsingPostWithHttpInfo($document_co)
    {
        $returnType = '\com\hydrogen\integration\Model\BrokerageDocumentVO';
        $request = $this->createDocumentUsingPostRequest($document_co);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com\hydrogen\integration\Model\BrokerageDocumentVO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createDocumentUsingPostAsync
     *
     * Create a Brokerage document
     *
     * @param  \com\hydrogen\integration\Model\BrokerageDocumentCO $document_co documentCO (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createDocumentUsingPostAsync($document_co)
    {
        return $this->createDocumentUsingPostAsyncWithHttpInfo($document_co)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createDocumentUsingPostAsyncWithHttpInfo
     *
     * Create a Brokerage document
     *
     * @param  \com\hydrogen\integration\Model\BrokerageDocumentCO $document_co documentCO (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createDocumentUsingPostAsyncWithHttpInfo($document_co)
    {
        $returnType = '\com\hydrogen\integration\Model\BrokerageDocumentVO';
        $request = $this->createDocumentUsingPostRequest($document_co);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createDocumentUsingPost'
     *
     * @param  \com\hydrogen\integration\Model\BrokerageDocumentCO $document_co documentCO (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createDocumentUsingPostRequest($document_co)
    {
        // verify the required parameter 'document_co' is set
        if ($document_co === null || (is_array($document_co) && count($document_co) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $document_co when calling createDocumentUsingPost'
            );
        }

        $resourcePath = '/brokerage/document';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($document_co)) {
            $_tempBody = $document_co;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createOrderUsingPost
     *
     * Create an Order
     *
     * @param  \com\hydrogen\integration\Model\BrokerageOrderCO $brokerage_order_co brokerageOrderCO (required)
     *
     * @throws \com\hydrogen\integration\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \com\hydrogen\integration\Model\BrokerageOrderVO
     */
    public function createOrderUsingPost($brokerage_order_co)
    {
        list($response) = $this->createOrderUsingPostWithHttpInfo($brokerage_order_co);
        return $response;
    }

    /**
     * Operation createOrderUsingPostWithHttpInfo
     *
     * Create an Order
     *
     * @param  \com\hydrogen\integration\Model\BrokerageOrderCO $brokerage_order_co brokerageOrderCO (required)
     *
     * @throws \com\hydrogen\integration\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \com\hydrogen\integration\Model\BrokerageOrderVO, HTTP status code, HTTP response headers (array of strings)
     */
    public function createOrderUsingPostWithHttpInfo($brokerage_order_co)
    {
        $returnType = '\com\hydrogen\integration\Model\BrokerageOrderVO';
        $request = $this->createOrderUsingPostRequest($brokerage_order_co);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com\hydrogen\integration\Model\BrokerageOrderVO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createOrderUsingPostAsync
     *
     * Create an Order
     *
     * @param  \com\hydrogen\integration\Model\BrokerageOrderCO $brokerage_order_co brokerageOrderCO (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createOrderUsingPostAsync($brokerage_order_co)
    {
        return $this->createOrderUsingPostAsyncWithHttpInfo($brokerage_order_co)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createOrderUsingPostAsyncWithHttpInfo
     *
     * Create an Order
     *
     * @param  \com\hydrogen\integration\Model\BrokerageOrderCO $brokerage_order_co brokerageOrderCO (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createOrderUsingPostAsyncWithHttpInfo($brokerage_order_co)
    {
        $returnType = '\com\hydrogen\integration\Model\BrokerageOrderVO';
        $request = $this->createOrderUsingPostRequest($brokerage_order_co);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createOrderUsingPost'
     *
     * @param  \com\hydrogen\integration\Model\BrokerageOrderCO $brokerage_order_co brokerageOrderCO (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createOrderUsingPostRequest($brokerage_order_co)
    {
        // verify the required parameter 'brokerage_order_co' is set
        if ($brokerage_order_co === null || (is_array($brokerage_order_co) && count($brokerage_order_co) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $brokerage_order_co when calling createOrderUsingPost'
            );
        }

        $resourcePath = '/brokerage/order';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($brokerage_order_co)) {
            $_tempBody = $brokerage_order_co;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createWithdrawalUsingPost
     *
     * Create a withdrawal
     *
     * @param  \com\hydrogen\integration\Model\BrokerageWithdrawalCO $brokerage_withdrawal_co brokerageWithdrawalCO (required)
     *
     * @throws \com\hydrogen\integration\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \com\hydrogen\integration\Model\BrokerageWithdrawalVO
     */
    public function createWithdrawalUsingPost($brokerage_withdrawal_co)
    {
        list($response) = $this->createWithdrawalUsingPostWithHttpInfo($brokerage_withdrawal_co);
        return $response;
    }

    /**
     * Operation createWithdrawalUsingPostWithHttpInfo
     *
     * Create a withdrawal
     *
     * @param  \com\hydrogen\integration\Model\BrokerageWithdrawalCO $brokerage_withdrawal_co brokerageWithdrawalCO (required)
     *
     * @throws \com\hydrogen\integration\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \com\hydrogen\integration\Model\BrokerageWithdrawalVO, HTTP status code, HTTP response headers (array of strings)
     */
    public function createWithdrawalUsingPostWithHttpInfo($brokerage_withdrawal_co)
    {
        $returnType = '\com\hydrogen\integration\Model\BrokerageWithdrawalVO';
        $request = $this->createWithdrawalUsingPostRequest($brokerage_withdrawal_co);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com\hydrogen\integration\Model\BrokerageWithdrawalVO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createWithdrawalUsingPostAsync
     *
     * Create a withdrawal
     *
     * @param  \com\hydrogen\integration\Model\BrokerageWithdrawalCO $brokerage_withdrawal_co brokerageWithdrawalCO (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createWithdrawalUsingPostAsync($brokerage_withdrawal_co)
    {
        return $this->createWithdrawalUsingPostAsyncWithHttpInfo($brokerage_withdrawal_co)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createWithdrawalUsingPostAsyncWithHttpInfo
     *
     * Create a withdrawal
     *
     * @param  \com\hydrogen\integration\Model\BrokerageWithdrawalCO $brokerage_withdrawal_co brokerageWithdrawalCO (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createWithdrawalUsingPostAsyncWithHttpInfo($brokerage_withdrawal_co)
    {
        $returnType = '\com\hydrogen\integration\Model\BrokerageWithdrawalVO';
        $request = $this->createWithdrawalUsingPostRequest($brokerage_withdrawal_co);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createWithdrawalUsingPost'
     *
     * @param  \com\hydrogen\integration\Model\BrokerageWithdrawalCO $brokerage_withdrawal_co brokerageWithdrawalCO (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createWithdrawalUsingPostRequest($brokerage_withdrawal_co)
    {
        // verify the required parameter 'brokerage_withdrawal_co' is set
        if ($brokerage_withdrawal_co === null || (is_array($brokerage_withdrawal_co) && count($brokerage_withdrawal_co) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $brokerage_withdrawal_co when calling createWithdrawalUsingPost'
            );
        }

        $resourcePath = '/brokerage/withdrawal';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($brokerage_withdrawal_co)) {
            $_tempBody = $brokerage_withdrawal_co;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteBankLinkUsingDelete1
     *
     * Delete a Bank Link
     *
     * @param  string $nucleus_bank_link_id nucleus_bank_link_id (required)
     *
     * @throws \com\hydrogen\integration\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteBankLinkUsingDelete1($nucleus_bank_link_id)
    {
        $this->deleteBankLinkUsingDelete1WithHttpInfo($nucleus_bank_link_id);
    }

    /**
     * Operation deleteBankLinkUsingDelete1WithHttpInfo
     *
     * Delete a Bank Link
     *
     * @param  string $nucleus_bank_link_id nucleus_bank_link_id (required)
     *
     * @throws \com\hydrogen\integration\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteBankLinkUsingDelete1WithHttpInfo($nucleus_bank_link_id)
    {
        $returnType = '';
        $request = $this->deleteBankLinkUsingDelete1Request($nucleus_bank_link_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteBankLinkUsingDelete1Async
     *
     * Delete a Bank Link
     *
     * @param  string $nucleus_bank_link_id nucleus_bank_link_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteBankLinkUsingDelete1Async($nucleus_bank_link_id)
    {
        return $this->deleteBankLinkUsingDelete1AsyncWithHttpInfo($nucleus_bank_link_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteBankLinkUsingDelete1AsyncWithHttpInfo
     *
     * Delete a Bank Link
     *
     * @param  string $nucleus_bank_link_id nucleus_bank_link_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteBankLinkUsingDelete1AsyncWithHttpInfo($nucleus_bank_link_id)
    {
        $returnType = '';
        $request = $this->deleteBankLinkUsingDelete1Request($nucleus_bank_link_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteBankLinkUsingDelete1'
     *
     * @param  string $nucleus_bank_link_id nucleus_bank_link_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteBankLinkUsingDelete1Request($nucleus_bank_link_id)
    {
        // verify the required parameter 'nucleus_bank_link_id' is set
        if ($nucleus_bank_link_id === null || (is_array($nucleus_bank_link_id) && count($nucleus_bank_link_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nucleus_bank_link_id when calling deleteBankLinkUsingDelete1'
            );
        }

        $resourcePath = '/brokerage/bank_link/{nucleus_bank_link_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($nucleus_bank_link_id !== null) {
            $resourcePath = str_replace(
                '{' . 'nucleus_bank_link_id' . '}',
                ObjectSerializer::toPathValue($nucleus_bank_link_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getBalanceUsingGet1
     *
     * Get account balance
     *
     * @param  string $nucleus_portfolio_id nucleus_portfolio_id (required)
     *
     * @throws \com\hydrogen\integration\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \com\hydrogen\integration\Model\BrokerageBalanceVO
     */
    public function getBalanceUsingGet1($nucleus_portfolio_id)
    {
        list($response) = $this->getBalanceUsingGet1WithHttpInfo($nucleus_portfolio_id);
        return $response;
    }

    /**
     * Operation getBalanceUsingGet1WithHttpInfo
     *
     * Get account balance
     *
     * @param  string $nucleus_portfolio_id nucleus_portfolio_id (required)
     *
     * @throws \com\hydrogen\integration\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \com\hydrogen\integration\Model\BrokerageBalanceVO, HTTP status code, HTTP response headers (array of strings)
     */
    public function getBalanceUsingGet1WithHttpInfo($nucleus_portfolio_id)
    {
        $returnType = '\com\hydrogen\integration\Model\BrokerageBalanceVO';
        $request = $this->getBalanceUsingGet1Request($nucleus_portfolio_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com\hydrogen\integration\Model\BrokerageBalanceVO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getBalanceUsingGet1Async
     *
     * Get account balance
     *
     * @param  string $nucleus_portfolio_id nucleus_portfolio_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBalanceUsingGet1Async($nucleus_portfolio_id)
    {
        return $this->getBalanceUsingGet1AsyncWithHttpInfo($nucleus_portfolio_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getBalanceUsingGet1AsyncWithHttpInfo
     *
     * Get account balance
     *
     * @param  string $nucleus_portfolio_id nucleus_portfolio_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBalanceUsingGet1AsyncWithHttpInfo($nucleus_portfolio_id)
    {
        $returnType = '\com\hydrogen\integration\Model\BrokerageBalanceVO';
        $request = $this->getBalanceUsingGet1Request($nucleus_portfolio_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getBalanceUsingGet1'
     *
     * @param  string $nucleus_portfolio_id nucleus_portfolio_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getBalanceUsingGet1Request($nucleus_portfolio_id)
    {
        // verify the required parameter 'nucleus_portfolio_id' is set
        if ($nucleus_portfolio_id === null || (is_array($nucleus_portfolio_id) && count($nucleus_portfolio_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nucleus_portfolio_id when calling getBalanceUsingGet1'
            );
        }

        $resourcePath = '/brokerage/balance/{nucleus_portfolio_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($nucleus_portfolio_id !== null) {
            $resourcePath = str_replace(
                '{' . 'nucleus_portfolio_id' . '}',
                ObjectSerializer::toPathValue($nucleus_portfolio_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getBankLinkUsingGet1
     *
     * Get a Bank Link
     *
     * @param  string $nucleus_bank_link_id nucleus_bank_link_id (required)
     *
     * @throws \com\hydrogen\integration\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \com\hydrogen\integration\Model\BrokerageBankLinkVO
     */
    public function getBankLinkUsingGet1($nucleus_bank_link_id)
    {
        list($response) = $this->getBankLinkUsingGet1WithHttpInfo($nucleus_bank_link_id);
        return $response;
    }

    /**
     * Operation getBankLinkUsingGet1WithHttpInfo
     *
     * Get a Bank Link
     *
     * @param  string $nucleus_bank_link_id nucleus_bank_link_id (required)
     *
     * @throws \com\hydrogen\integration\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \com\hydrogen\integration\Model\BrokerageBankLinkVO, HTTP status code, HTTP response headers (array of strings)
     */
    public function getBankLinkUsingGet1WithHttpInfo($nucleus_bank_link_id)
    {
        $returnType = '\com\hydrogen\integration\Model\BrokerageBankLinkVO';
        $request = $this->getBankLinkUsingGet1Request($nucleus_bank_link_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com\hydrogen\integration\Model\BrokerageBankLinkVO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getBankLinkUsingGet1Async
     *
     * Get a Bank Link
     *
     * @param  string $nucleus_bank_link_id nucleus_bank_link_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBankLinkUsingGet1Async($nucleus_bank_link_id)
    {
        return $this->getBankLinkUsingGet1AsyncWithHttpInfo($nucleus_bank_link_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getBankLinkUsingGet1AsyncWithHttpInfo
     *
     * Get a Bank Link
     *
     * @param  string $nucleus_bank_link_id nucleus_bank_link_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBankLinkUsingGet1AsyncWithHttpInfo($nucleus_bank_link_id)
    {
        $returnType = '\com\hydrogen\integration\Model\BrokerageBankLinkVO';
        $request = $this->getBankLinkUsingGet1Request($nucleus_bank_link_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getBankLinkUsingGet1'
     *
     * @param  string $nucleus_bank_link_id nucleus_bank_link_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getBankLinkUsingGet1Request($nucleus_bank_link_id)
    {
        // verify the required parameter 'nucleus_bank_link_id' is set
        if ($nucleus_bank_link_id === null || (is_array($nucleus_bank_link_id) && count($nucleus_bank_link_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nucleus_bank_link_id when calling getBankLinkUsingGet1'
            );
        }

        $resourcePath = '/brokerage/bank_link/{nucleus_bank_link_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($nucleus_bank_link_id !== null) {
            $resourcePath = str_replace(
                '{' . 'nucleus_bank_link_id' . '}',
                ObjectSerializer::toPathValue($nucleus_bank_link_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getBrokerageAccountStatementUsingGet
     *
     * Get a Brokerage account statement
     *
     * @param  \DateTime $end_date end_date (required)
     * @param  string $nucleus_account_id nucleus_account_id (required)
     * @param  \DateTime $start_date start_date (required)
     * @param  string $statement_type statement_type (required)
     *
     * @throws \com\hydrogen\integration\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \com\hydrogen\integration\Model\BrokerageStatementVO
     */
    public function getBrokerageAccountStatementUsingGet($end_date, $nucleus_account_id, $start_date, $statement_type)
    {
        list($response) = $this->getBrokerageAccountStatementUsingGetWithHttpInfo($end_date, $nucleus_account_id, $start_date, $statement_type);
        return $response;
    }

    /**
     * Operation getBrokerageAccountStatementUsingGetWithHttpInfo
     *
     * Get a Brokerage account statement
     *
     * @param  \DateTime $end_date end_date (required)
     * @param  string $nucleus_account_id nucleus_account_id (required)
     * @param  \DateTime $start_date start_date (required)
     * @param  string $statement_type statement_type (required)
     *
     * @throws \com\hydrogen\integration\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \com\hydrogen\integration\Model\BrokerageStatementVO, HTTP status code, HTTP response headers (array of strings)
     */
    public function getBrokerageAccountStatementUsingGetWithHttpInfo($end_date, $nucleus_account_id, $start_date, $statement_type)
    {
        $returnType = '\com\hydrogen\integration\Model\BrokerageStatementVO';
        $request = $this->getBrokerageAccountStatementUsingGetRequest($end_date, $nucleus_account_id, $start_date, $statement_type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com\hydrogen\integration\Model\BrokerageStatementVO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getBrokerageAccountStatementUsingGetAsync
     *
     * Get a Brokerage account statement
     *
     * @param  \DateTime $end_date end_date (required)
     * @param  string $nucleus_account_id nucleus_account_id (required)
     * @param  \DateTime $start_date start_date (required)
     * @param  string $statement_type statement_type (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBrokerageAccountStatementUsingGetAsync($end_date, $nucleus_account_id, $start_date, $statement_type)
    {
        return $this->getBrokerageAccountStatementUsingGetAsyncWithHttpInfo($end_date, $nucleus_account_id, $start_date, $statement_type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getBrokerageAccountStatementUsingGetAsyncWithHttpInfo
     *
     * Get a Brokerage account statement
     *
     * @param  \DateTime $end_date end_date (required)
     * @param  string $nucleus_account_id nucleus_account_id (required)
     * @param  \DateTime $start_date start_date (required)
     * @param  string $statement_type statement_type (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBrokerageAccountStatementUsingGetAsyncWithHttpInfo($end_date, $nucleus_account_id, $start_date, $statement_type)
    {
        $returnType = '\com\hydrogen\integration\Model\BrokerageStatementVO';
        $request = $this->getBrokerageAccountStatementUsingGetRequest($end_date, $nucleus_account_id, $start_date, $statement_type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getBrokerageAccountStatementUsingGet'
     *
     * @param  \DateTime $end_date end_date (required)
     * @param  string $nucleus_account_id nucleus_account_id (required)
     * @param  \DateTime $start_date start_date (required)
     * @param  string $statement_type statement_type (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getBrokerageAccountStatementUsingGetRequest($end_date, $nucleus_account_id, $start_date, $statement_type)
    {
        // verify the required parameter 'end_date' is set
        if ($end_date === null || (is_array($end_date) && count($end_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $end_date when calling getBrokerageAccountStatementUsingGet'
            );
        }
        // verify the required parameter 'nucleus_account_id' is set
        if ($nucleus_account_id === null || (is_array($nucleus_account_id) && count($nucleus_account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nucleus_account_id when calling getBrokerageAccountStatementUsingGet'
            );
        }
        // verify the required parameter 'start_date' is set
        if ($start_date === null || (is_array($start_date) && count($start_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $start_date when calling getBrokerageAccountStatementUsingGet'
            );
        }
        // verify the required parameter 'statement_type' is set
        if ($statement_type === null || (is_array($statement_type) && count($statement_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $statement_type when calling getBrokerageAccountStatementUsingGet'
            );
        }

        $resourcePath = '/brokerage/statement/{nucleus_account_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($end_date !== null) {
            $queryParams['end_date'] = ObjectSerializer::toQueryValue($end_date);
        }
        // query params
        if ($start_date !== null) {
            $queryParams['start_date'] = ObjectSerializer::toQueryValue($start_date);
        }
        // query params
        if ($statement_type !== null) {
            $queryParams['statement_type'] = ObjectSerializer::toQueryValue($statement_type);
        }

        // path params
        if ($nucleus_account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'nucleus_account_id' . '}',
                ObjectSerializer::toPathValue($nucleus_account_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDocumentUsingGet
     *
     * Get a Brokerage document
     *
     * @param  string $nucleus_document_id nucleus_document_id (required)
     *
     * @throws \com\hydrogen\integration\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \com\hydrogen\integration\Model\BrokerageDocumentVO
     */
    public function getDocumentUsingGet($nucleus_document_id)
    {
        list($response) = $this->getDocumentUsingGetWithHttpInfo($nucleus_document_id);
        return $response;
    }

    /**
     * Operation getDocumentUsingGetWithHttpInfo
     *
     * Get a Brokerage document
     *
     * @param  string $nucleus_document_id nucleus_document_id (required)
     *
     * @throws \com\hydrogen\integration\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \com\hydrogen\integration\Model\BrokerageDocumentVO, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDocumentUsingGetWithHttpInfo($nucleus_document_id)
    {
        $returnType = '\com\hydrogen\integration\Model\BrokerageDocumentVO';
        $request = $this->getDocumentUsingGetRequest($nucleus_document_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com\hydrogen\integration\Model\BrokerageDocumentVO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDocumentUsingGetAsync
     *
     * Get a Brokerage document
     *
     * @param  string $nucleus_document_id nucleus_document_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDocumentUsingGetAsync($nucleus_document_id)
    {
        return $this->getDocumentUsingGetAsyncWithHttpInfo($nucleus_document_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDocumentUsingGetAsyncWithHttpInfo
     *
     * Get a Brokerage document
     *
     * @param  string $nucleus_document_id nucleus_document_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDocumentUsingGetAsyncWithHttpInfo($nucleus_document_id)
    {
        $returnType = '\com\hydrogen\integration\Model\BrokerageDocumentVO';
        $request = $this->getDocumentUsingGetRequest($nucleus_document_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDocumentUsingGet'
     *
     * @param  string $nucleus_document_id nucleus_document_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getDocumentUsingGetRequest($nucleus_document_id)
    {
        // verify the required parameter 'nucleus_document_id' is set
        if ($nucleus_document_id === null || (is_array($nucleus_document_id) && count($nucleus_document_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nucleus_document_id when calling getDocumentUsingGet'
            );
        }

        $resourcePath = '/brokerage/document/{nucleus_document_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($nucleus_document_id !== null) {
            $resourcePath = str_replace(
                '{' . 'nucleus_document_id' . '}',
                ObjectSerializer::toPathValue($nucleus_document_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getHoldingPerformanceUsingGet
     *
     * Get portfolio holding performance
     *
     * @param  string $nucleus_portfolio_id nucleus_portfolio_id (required)
     *
     * @throws \com\hydrogen\integration\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \com\hydrogen\integration\Model\BrokeragePerformanceVO
     */
    public function getHoldingPerformanceUsingGet($nucleus_portfolio_id)
    {
        list($response) = $this->getHoldingPerformanceUsingGetWithHttpInfo($nucleus_portfolio_id);
        return $response;
    }

    /**
     * Operation getHoldingPerformanceUsingGetWithHttpInfo
     *
     * Get portfolio holding performance
     *
     * @param  string $nucleus_portfolio_id nucleus_portfolio_id (required)
     *
     * @throws \com\hydrogen\integration\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \com\hydrogen\integration\Model\BrokeragePerformanceVO, HTTP status code, HTTP response headers (array of strings)
     */
    public function getHoldingPerformanceUsingGetWithHttpInfo($nucleus_portfolio_id)
    {
        $returnType = '\com\hydrogen\integration\Model\BrokeragePerformanceVO';
        $request = $this->getHoldingPerformanceUsingGetRequest($nucleus_portfolio_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com\hydrogen\integration\Model\BrokeragePerformanceVO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getHoldingPerformanceUsingGetAsync
     *
     * Get portfolio holding performance
     *
     * @param  string $nucleus_portfolio_id nucleus_portfolio_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHoldingPerformanceUsingGetAsync($nucleus_portfolio_id)
    {
        return $this->getHoldingPerformanceUsingGetAsyncWithHttpInfo($nucleus_portfolio_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getHoldingPerformanceUsingGetAsyncWithHttpInfo
     *
     * Get portfolio holding performance
     *
     * @param  string $nucleus_portfolio_id nucleus_portfolio_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHoldingPerformanceUsingGetAsyncWithHttpInfo($nucleus_portfolio_id)
    {
        $returnType = '\com\hydrogen\integration\Model\BrokeragePerformanceVO';
        $request = $this->getHoldingPerformanceUsingGetRequest($nucleus_portfolio_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getHoldingPerformanceUsingGet'
     *
     * @param  string $nucleus_portfolio_id nucleus_portfolio_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getHoldingPerformanceUsingGetRequest($nucleus_portfolio_id)
    {
        // verify the required parameter 'nucleus_portfolio_id' is set
        if ($nucleus_portfolio_id === null || (is_array($nucleus_portfolio_id) && count($nucleus_portfolio_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nucleus_portfolio_id when calling getHoldingPerformanceUsingGet'
            );
        }

        $resourcePath = '/brokerage/holding/performance/{nucleus_portfolio_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($nucleus_portfolio_id !== null) {
            $resourcePath = str_replace(
                '{' . 'nucleus_portfolio_id' . '}',
                ObjectSerializer::toPathValue($nucleus_portfolio_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getHoldingUsingGet
     *
     * Get portfolio holdings
     *
     * @param  string $nucleus_portfolio_id nucleus_portfolio_id (required)
     *
     * @throws \com\hydrogen\integration\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \com\hydrogen\integration\Model\BrokerageHoldingVO
     */
    public function getHoldingUsingGet($nucleus_portfolio_id)
    {
        list($response) = $this->getHoldingUsingGetWithHttpInfo($nucleus_portfolio_id);
        return $response;
    }

    /**
     * Operation getHoldingUsingGetWithHttpInfo
     *
     * Get portfolio holdings
     *
     * @param  string $nucleus_portfolio_id nucleus_portfolio_id (required)
     *
     * @throws \com\hydrogen\integration\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \com\hydrogen\integration\Model\BrokerageHoldingVO, HTTP status code, HTTP response headers (array of strings)
     */
    public function getHoldingUsingGetWithHttpInfo($nucleus_portfolio_id)
    {
        $returnType = '\com\hydrogen\integration\Model\BrokerageHoldingVO';
        $request = $this->getHoldingUsingGetRequest($nucleus_portfolio_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com\hydrogen\integration\Model\BrokerageHoldingVO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getHoldingUsingGetAsync
     *
     * Get portfolio holdings
     *
     * @param  string $nucleus_portfolio_id nucleus_portfolio_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHoldingUsingGetAsync($nucleus_portfolio_id)
    {
        return $this->getHoldingUsingGetAsyncWithHttpInfo($nucleus_portfolio_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getHoldingUsingGetAsyncWithHttpInfo
     *
     * Get portfolio holdings
     *
     * @param  string $nucleus_portfolio_id nucleus_portfolio_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHoldingUsingGetAsyncWithHttpInfo($nucleus_portfolio_id)
    {
        $returnType = '\com\hydrogen\integration\Model\BrokerageHoldingVO';
        $request = $this->getHoldingUsingGetRequest($nucleus_portfolio_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getHoldingUsingGet'
     *
     * @param  string $nucleus_portfolio_id nucleus_portfolio_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getHoldingUsingGetRequest($nucleus_portfolio_id)
    {
        // verify the required parameter 'nucleus_portfolio_id' is set
        if ($nucleus_portfolio_id === null || (is_array($nucleus_portfolio_id) && count($nucleus_portfolio_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nucleus_portfolio_id when calling getHoldingUsingGet'
            );
        }

        $resourcePath = '/brokerage/holding/{nucleus_portfolio_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($nucleus_portfolio_id !== null) {
            $resourcePath = str_replace(
                '{' . 'nucleus_portfolio_id' . '}',
                ObjectSerializer::toPathValue($nucleus_portfolio_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOrderUsingGet
     *
     * Get an Order
     *
     * @param  string $nucleus_order_id nucleus_order_id (required)
     *
     * @throws \com\hydrogen\integration\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \com\hydrogen\integration\Model\BrokerageOrderVO
     */
    public function getOrderUsingGet($nucleus_order_id)
    {
        list($response) = $this->getOrderUsingGetWithHttpInfo($nucleus_order_id);
        return $response;
    }

    /**
     * Operation getOrderUsingGetWithHttpInfo
     *
     * Get an Order
     *
     * @param  string $nucleus_order_id nucleus_order_id (required)
     *
     * @throws \com\hydrogen\integration\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \com\hydrogen\integration\Model\BrokerageOrderVO, HTTP status code, HTTP response headers (array of strings)
     */
    public function getOrderUsingGetWithHttpInfo($nucleus_order_id)
    {
        $returnType = '\com\hydrogen\integration\Model\BrokerageOrderVO';
        $request = $this->getOrderUsingGetRequest($nucleus_order_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com\hydrogen\integration\Model\BrokerageOrderVO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getOrderUsingGetAsync
     *
     * Get an Order
     *
     * @param  string $nucleus_order_id nucleus_order_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrderUsingGetAsync($nucleus_order_id)
    {
        return $this->getOrderUsingGetAsyncWithHttpInfo($nucleus_order_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOrderUsingGetAsyncWithHttpInfo
     *
     * Get an Order
     *
     * @param  string $nucleus_order_id nucleus_order_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrderUsingGetAsyncWithHttpInfo($nucleus_order_id)
    {
        $returnType = '\com\hydrogen\integration\Model\BrokerageOrderVO';
        $request = $this->getOrderUsingGetRequest($nucleus_order_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOrderUsingGet'
     *
     * @param  string $nucleus_order_id nucleus_order_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getOrderUsingGetRequest($nucleus_order_id)
    {
        // verify the required parameter 'nucleus_order_id' is set
        if ($nucleus_order_id === null || (is_array($nucleus_order_id) && count($nucleus_order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nucleus_order_id when calling getOrderUsingGet'
            );
        }

        $resourcePath = '/brokerage/order/{nucleus_order_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($nucleus_order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'nucleus_order_id' . '}',
                ObjectSerializer::toPathValue($nucleus_order_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSecuritiesUsingGet
     *
     * Get securities information
     *
     * @param  string $vendor_name vendor_name (required)
     * @param  bool $get_fundamentals get_fundamentals (optional, default to false)
     * @param  string $nucleus_security_id nucleus_security_id (optional)
     *
     * @throws \com\hydrogen\integration\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \com\hydrogen\integration\Model\BrokerageSecuritiesVO
     */
    public function getSecuritiesUsingGet($vendor_name, $get_fundamentals = 'false', $nucleus_security_id = null)
    {
        list($response) = $this->getSecuritiesUsingGetWithHttpInfo($vendor_name, $get_fundamentals, $nucleus_security_id);
        return $response;
    }

    /**
     * Operation getSecuritiesUsingGetWithHttpInfo
     *
     * Get securities information
     *
     * @param  string $vendor_name vendor_name (required)
     * @param  bool $get_fundamentals get_fundamentals (optional, default to false)
     * @param  string $nucleus_security_id nucleus_security_id (optional)
     *
     * @throws \com\hydrogen\integration\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \com\hydrogen\integration\Model\BrokerageSecuritiesVO, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSecuritiesUsingGetWithHttpInfo($vendor_name, $get_fundamentals = 'false', $nucleus_security_id = null)
    {
        $returnType = '\com\hydrogen\integration\Model\BrokerageSecuritiesVO';
        $request = $this->getSecuritiesUsingGetRequest($vendor_name, $get_fundamentals, $nucleus_security_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com\hydrogen\integration\Model\BrokerageSecuritiesVO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSecuritiesUsingGetAsync
     *
     * Get securities information
     *
     * @param  string $vendor_name vendor_name (required)
     * @param  bool $get_fundamentals get_fundamentals (optional, default to false)
     * @param  string $nucleus_security_id nucleus_security_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSecuritiesUsingGetAsync($vendor_name, $get_fundamentals = 'false', $nucleus_security_id = null)
    {
        return $this->getSecuritiesUsingGetAsyncWithHttpInfo($vendor_name, $get_fundamentals, $nucleus_security_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSecuritiesUsingGetAsyncWithHttpInfo
     *
     * Get securities information
     *
     * @param  string $vendor_name vendor_name (required)
     * @param  bool $get_fundamentals get_fundamentals (optional, default to false)
     * @param  string $nucleus_security_id nucleus_security_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSecuritiesUsingGetAsyncWithHttpInfo($vendor_name, $get_fundamentals = 'false', $nucleus_security_id = null)
    {
        $returnType = '\com\hydrogen\integration\Model\BrokerageSecuritiesVO';
        $request = $this->getSecuritiesUsingGetRequest($vendor_name, $get_fundamentals, $nucleus_security_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSecuritiesUsingGet'
     *
     * @param  string $vendor_name vendor_name (required)
     * @param  bool $get_fundamentals get_fundamentals (optional, default to false)
     * @param  string $nucleus_security_id nucleus_security_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getSecuritiesUsingGetRequest($vendor_name, $get_fundamentals = 'false', $nucleus_security_id = null)
    {
        // verify the required parameter 'vendor_name' is set
        if ($vendor_name === null || (is_array($vendor_name) && count($vendor_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $vendor_name when calling getSecuritiesUsingGet'
            );
        }

        $resourcePath = '/brokerage/securities';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($get_fundamentals !== null) {
            $queryParams['get_fundamentals'] = ObjectSerializer::toQueryValue($get_fundamentals);
        }
        // query params
        if ($nucleus_security_id !== null) {
            $queryParams['nucleus_security_id'] = ObjectSerializer::toQueryValue($nucleus_security_id);
        }
        // query params
        if ($vendor_name !== null) {
            $queryParams['vendor_name'] = ObjectSerializer::toQueryValue($vendor_name);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTransactionsUsingGet
     *
     * Get account transactions
     *
     * @param  \com\hydrogen\integration\Model\GetTransactionsResponse $drivewealth_response drivewealthResponse (required)
     * @param  \DateTime $end_date end_date (required)
     * @param  string $nucleus_portfolio_id nucleus_portfolio_id (required)
     * @param  \DateTime $start_date start_date (required)
     *
     * @throws \com\hydrogen\integration\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \com\hydrogen\integration\Model\BrokerageTransactionVO
     */
    public function getTransactionsUsingGet($drivewealth_response, $end_date, $nucleus_portfolio_id, $start_date)
    {
        list($response) = $this->getTransactionsUsingGetWithHttpInfo($drivewealth_response, $end_date, $nucleus_portfolio_id, $start_date);
        return $response;
    }

    /**
     * Operation getTransactionsUsingGetWithHttpInfo
     *
     * Get account transactions
     *
     * @param  \com\hydrogen\integration\Model\GetTransactionsResponse $drivewealth_response drivewealthResponse (required)
     * @param  \DateTime $end_date end_date (required)
     * @param  string $nucleus_portfolio_id nucleus_portfolio_id (required)
     * @param  \DateTime $start_date start_date (required)
     *
     * @throws \com\hydrogen\integration\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \com\hydrogen\integration\Model\BrokerageTransactionVO, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTransactionsUsingGetWithHttpInfo($drivewealth_response, $end_date, $nucleus_portfolio_id, $start_date)
    {
        $returnType = '\com\hydrogen\integration\Model\BrokerageTransactionVO';
        $request = $this->getTransactionsUsingGetRequest($drivewealth_response, $end_date, $nucleus_portfolio_id, $start_date);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com\hydrogen\integration\Model\BrokerageTransactionVO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getTransactionsUsingGetAsync
     *
     * Get account transactions
     *
     * @param  \com\hydrogen\integration\Model\GetTransactionsResponse $drivewealth_response drivewealthResponse (required)
     * @param  \DateTime $end_date end_date (required)
     * @param  string $nucleus_portfolio_id nucleus_portfolio_id (required)
     * @param  \DateTime $start_date start_date (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTransactionsUsingGetAsync($drivewealth_response, $end_date, $nucleus_portfolio_id, $start_date)
    {
        return $this->getTransactionsUsingGetAsyncWithHttpInfo($drivewealth_response, $end_date, $nucleus_portfolio_id, $start_date)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTransactionsUsingGetAsyncWithHttpInfo
     *
     * Get account transactions
     *
     * @param  \com\hydrogen\integration\Model\GetTransactionsResponse $drivewealth_response drivewealthResponse (required)
     * @param  \DateTime $end_date end_date (required)
     * @param  string $nucleus_portfolio_id nucleus_portfolio_id (required)
     * @param  \DateTime $start_date start_date (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTransactionsUsingGetAsyncWithHttpInfo($drivewealth_response, $end_date, $nucleus_portfolio_id, $start_date)
    {
        $returnType = '\com\hydrogen\integration\Model\BrokerageTransactionVO';
        $request = $this->getTransactionsUsingGetRequest($drivewealth_response, $end_date, $nucleus_portfolio_id, $start_date);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTransactionsUsingGet'
     *
     * @param  \com\hydrogen\integration\Model\GetTransactionsResponse $drivewealth_response drivewealthResponse (required)
     * @param  \DateTime $end_date end_date (required)
     * @param  string $nucleus_portfolio_id nucleus_portfolio_id (required)
     * @param  \DateTime $start_date start_date (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getTransactionsUsingGetRequest($drivewealth_response, $end_date, $nucleus_portfolio_id, $start_date)
    {
        // verify the required parameter 'drivewealth_response' is set
        if ($drivewealth_response === null || (is_array($drivewealth_response) && count($drivewealth_response) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $drivewealth_response when calling getTransactionsUsingGet'
            );
        }
        // verify the required parameter 'end_date' is set
        if ($end_date === null || (is_array($end_date) && count($end_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $end_date when calling getTransactionsUsingGet'
            );
        }
        // verify the required parameter 'nucleus_portfolio_id' is set
        if ($nucleus_portfolio_id === null || (is_array($nucleus_portfolio_id) && count($nucleus_portfolio_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nucleus_portfolio_id when calling getTransactionsUsingGet'
            );
        }
        // verify the required parameter 'start_date' is set
        if ($start_date === null || (is_array($start_date) && count($start_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $start_date when calling getTransactionsUsingGet'
            );
        }

        $resourcePath = '/brokerage/transaction/{nucleus_portfolio_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($end_date !== null) {
            $queryParams['end_date'] = ObjectSerializer::toQueryValue($end_date);
        }
        // query params
        if ($start_date !== null) {
            $queryParams['start_date'] = ObjectSerializer::toQueryValue($start_date);
        }

        // path params
        if ($nucleus_portfolio_id !== null) {
            $resourcePath = str_replace(
                '{' . 'nucleus_portfolio_id' . '}',
                ObjectSerializer::toPathValue($nucleus_portfolio_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($drivewealth_response)) {
            $_tempBody = $drivewealth_response;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateBankLinkUsingPut1
     *
     * Update a Bank Link
     *
     * @param  string $nucleus_bank_link_id nucleus_bank_link_id (required)
     *
     * @throws \com\hydrogen\integration\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \com\hydrogen\integration\Model\BrokerageBankLinkVO
     */
    public function updateBankLinkUsingPut1($nucleus_bank_link_id)
    {
        list($response) = $this->updateBankLinkUsingPut1WithHttpInfo($nucleus_bank_link_id);
        return $response;
    }

    /**
     * Operation updateBankLinkUsingPut1WithHttpInfo
     *
     * Update a Bank Link
     *
     * @param  string $nucleus_bank_link_id nucleus_bank_link_id (required)
     *
     * @throws \com\hydrogen\integration\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \com\hydrogen\integration\Model\BrokerageBankLinkVO, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateBankLinkUsingPut1WithHttpInfo($nucleus_bank_link_id)
    {
        $returnType = '\com\hydrogen\integration\Model\BrokerageBankLinkVO';
        $request = $this->updateBankLinkUsingPut1Request($nucleus_bank_link_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com\hydrogen\integration\Model\BrokerageBankLinkVO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateBankLinkUsingPut1Async
     *
     * Update a Bank Link
     *
     * @param  string $nucleus_bank_link_id nucleus_bank_link_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateBankLinkUsingPut1Async($nucleus_bank_link_id)
    {
        return $this->updateBankLinkUsingPut1AsyncWithHttpInfo($nucleus_bank_link_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateBankLinkUsingPut1AsyncWithHttpInfo
     *
     * Update a Bank Link
     *
     * @param  string $nucleus_bank_link_id nucleus_bank_link_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateBankLinkUsingPut1AsyncWithHttpInfo($nucleus_bank_link_id)
    {
        $returnType = '\com\hydrogen\integration\Model\BrokerageBankLinkVO';
        $request = $this->updateBankLinkUsingPut1Request($nucleus_bank_link_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateBankLinkUsingPut1'
     *
     * @param  string $nucleus_bank_link_id nucleus_bank_link_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateBankLinkUsingPut1Request($nucleus_bank_link_id)
    {
        // verify the required parameter 'nucleus_bank_link_id' is set
        if ($nucleus_bank_link_id === null || (is_array($nucleus_bank_link_id) && count($nucleus_bank_link_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nucleus_bank_link_id when calling updateBankLinkUsingPut1'
            );
        }

        $resourcePath = '/brokerage/bank_link/{nucleus_bank_link_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($nucleus_bank_link_id !== null) {
            $resourcePath = str_replace(
                '{' . 'nucleus_bank_link_id' . '}',
                ObjectSerializer::toPathValue($nucleus_bank_link_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateBrokerageClientUsingPut
     *
     * Update a Brokerage client
     *
     * @param  \com\hydrogen\integration\Model\BrokerageClientCO $client_co clientCO (required)
     *
     * @throws \com\hydrogen\integration\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \com\hydrogen\integration\Model\BrokerageUpdateClientVO
     */
    public function updateBrokerageClientUsingPut($client_co)
    {
        list($response) = $this->updateBrokerageClientUsingPutWithHttpInfo($client_co);
        return $response;
    }

    /**
     * Operation updateBrokerageClientUsingPutWithHttpInfo
     *
     * Update a Brokerage client
     *
     * @param  \com\hydrogen\integration\Model\BrokerageClientCO $client_co clientCO (required)
     *
     * @throws \com\hydrogen\integration\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \com\hydrogen\integration\Model\BrokerageUpdateClientVO, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateBrokerageClientUsingPutWithHttpInfo($client_co)
    {
        $returnType = '\com\hydrogen\integration\Model\BrokerageUpdateClientVO';
        $request = $this->updateBrokerageClientUsingPutRequest($client_co);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com\hydrogen\integration\Model\BrokerageUpdateClientVO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateBrokerageClientUsingPutAsync
     *
     * Update a Brokerage client
     *
     * @param  \com\hydrogen\integration\Model\BrokerageClientCO $client_co clientCO (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateBrokerageClientUsingPutAsync($client_co)
    {
        return $this->updateBrokerageClientUsingPutAsyncWithHttpInfo($client_co)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateBrokerageClientUsingPutAsyncWithHttpInfo
     *
     * Update a Brokerage client
     *
     * @param  \com\hydrogen\integration\Model\BrokerageClientCO $client_co clientCO (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateBrokerageClientUsingPutAsyncWithHttpInfo($client_co)
    {
        $returnType = '\com\hydrogen\integration\Model\BrokerageUpdateClientVO';
        $request = $this->updateBrokerageClientUsingPutRequest($client_co);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateBrokerageClientUsingPut'
     *
     * @param  \com\hydrogen\integration\Model\BrokerageClientCO $client_co clientCO (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateBrokerageClientUsingPutRequest($client_co)
    {
        // verify the required parameter 'client_co' is set
        if ($client_co === null || (is_array($client_co) && count($client_co) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_co when calling updateBrokerageClientUsingPut'
            );
        }

        $resourcePath = '/brokerage/client';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($client_co)) {
            $_tempBody = $client_co;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
