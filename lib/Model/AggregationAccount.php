<?php
/**
 * AggregationAccount
 *
 * PHP version 5
 *
 * @category Class
 * @package  com\hydrogen\integration
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Hydrogen Integration API
 *
 * The Hydrogen Integration API
 *
 * OpenAPI spec version: 1.2.1
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.18
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace com\hydrogen\integration\Model;

use \ArrayAccess;
use \com\hydrogen\integration\ObjectSerializer;

/**
 * AggregationAccount Class Doc Comment
 *
 * @category Class
 * @description Aggregation Account Object
 * @package  com\hydrogen\integration
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AggregationAccount implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AggregationAccount';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'account_holder' => 'string',
        'account_name' => 'string',
        'bank_link_id' => 'string',
        'category' => 'string',
        'client_id' => 'string',
        'create_date' => '\DateTime',
        'currency_code' => 'string',
        'financial_offer_id' => 'string',
        'id' => 'string',
        'institution_name' => 'string',
        'is_active' => 'bool',
        'is_asset' => 'bool',
        'is_business' => 'bool',
        'is_cash' => 'bool',
        'is_investment' => 'bool',
        'is_link_verified' => 'bool',
        'is_manual' => 'bool',
        'mask' => 'string',
        'metadata' => 'map[string,string]',
        'secondary_id' => 'string',
        'subcategory' => 'string',
        'update_date' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'account_holder' => null,
        'account_name' => null,
        'bank_link_id' => 'uuid',
        'category' => null,
        'client_id' => 'uuid',
        'create_date' => 'date-time',
        'currency_code' => null,
        'financial_offer_id' => 'uuid',
        'id' => 'uuid',
        'institution_name' => null,
        'is_active' => null,
        'is_asset' => null,
        'is_business' => null,
        'is_cash' => null,
        'is_investment' => null,
        'is_link_verified' => null,
        'is_manual' => null,
        'mask' => null,
        'metadata' => null,
        'secondary_id' => null,
        'subcategory' => null,
        'update_date' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account_holder' => 'account_holder',
        'account_name' => 'account_name',
        'bank_link_id' => 'bank_link_id',
        'category' => 'category',
        'client_id' => 'client_id',
        'create_date' => 'create_date',
        'currency_code' => 'currency_code',
        'financial_offer_id' => 'financial_offer_id',
        'id' => 'id',
        'institution_name' => 'institution_name',
        'is_active' => 'is_active',
        'is_asset' => 'is_asset',
        'is_business' => 'is_business',
        'is_cash' => 'is_cash',
        'is_investment' => 'is_investment',
        'is_link_verified' => 'is_link_verified',
        'is_manual' => 'is_manual',
        'mask' => 'mask',
        'metadata' => 'metadata',
        'secondary_id' => 'secondary_id',
        'subcategory' => 'subcategory',
        'update_date' => 'update_date'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account_holder' => 'setAccountHolder',
        'account_name' => 'setAccountName',
        'bank_link_id' => 'setBankLinkId',
        'category' => 'setCategory',
        'client_id' => 'setClientId',
        'create_date' => 'setCreateDate',
        'currency_code' => 'setCurrencyCode',
        'financial_offer_id' => 'setFinancialOfferId',
        'id' => 'setId',
        'institution_name' => 'setInstitutionName',
        'is_active' => 'setIsActive',
        'is_asset' => 'setIsAsset',
        'is_business' => 'setIsBusiness',
        'is_cash' => 'setIsCash',
        'is_investment' => 'setIsInvestment',
        'is_link_verified' => 'setIsLinkVerified',
        'is_manual' => 'setIsManual',
        'mask' => 'setMask',
        'metadata' => 'setMetadata',
        'secondary_id' => 'setSecondaryId',
        'subcategory' => 'setSubcategory',
        'update_date' => 'setUpdateDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account_holder' => 'getAccountHolder',
        'account_name' => 'getAccountName',
        'bank_link_id' => 'getBankLinkId',
        'category' => 'getCategory',
        'client_id' => 'getClientId',
        'create_date' => 'getCreateDate',
        'currency_code' => 'getCurrencyCode',
        'financial_offer_id' => 'getFinancialOfferId',
        'id' => 'getId',
        'institution_name' => 'getInstitutionName',
        'is_active' => 'getIsActive',
        'is_asset' => 'getIsAsset',
        'is_business' => 'getIsBusiness',
        'is_cash' => 'getIsCash',
        'is_investment' => 'getIsInvestment',
        'is_link_verified' => 'getIsLinkVerified',
        'is_manual' => 'getIsManual',
        'mask' => 'getMask',
        'metadata' => 'getMetadata',
        'secondary_id' => 'getSecondaryId',
        'subcategory' => 'getSubcategory',
        'update_date' => 'getUpdateDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['account_holder'] = isset($data['account_holder']) ? $data['account_holder'] : null;
        $this->container['account_name'] = isset($data['account_name']) ? $data['account_name'] : null;
        $this->container['bank_link_id'] = isset($data['bank_link_id']) ? $data['bank_link_id'] : null;
        $this->container['category'] = isset($data['category']) ? $data['category'] : null;
        $this->container['client_id'] = isset($data['client_id']) ? $data['client_id'] : null;
        $this->container['create_date'] = isset($data['create_date']) ? $data['create_date'] : null;
        $this->container['currency_code'] = isset($data['currency_code']) ? $data['currency_code'] : null;
        $this->container['financial_offer_id'] = isset($data['financial_offer_id']) ? $data['financial_offer_id'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['institution_name'] = isset($data['institution_name']) ? $data['institution_name'] : null;
        $this->container['is_active'] = isset($data['is_active']) ? $data['is_active'] : null;
        $this->container['is_asset'] = isset($data['is_asset']) ? $data['is_asset'] : null;
        $this->container['is_business'] = isset($data['is_business']) ? $data['is_business'] : null;
        $this->container['is_cash'] = isset($data['is_cash']) ? $data['is_cash'] : null;
        $this->container['is_investment'] = isset($data['is_investment']) ? $data['is_investment'] : null;
        $this->container['is_link_verified'] = isset($data['is_link_verified']) ? $data['is_link_verified'] : null;
        $this->container['is_manual'] = isset($data['is_manual']) ? $data['is_manual'] : null;
        $this->container['mask'] = isset($data['mask']) ? $data['mask'] : null;
        $this->container['metadata'] = isset($data['metadata']) ? $data['metadata'] : null;
        $this->container['secondary_id'] = isset($data['secondary_id']) ? $data['secondary_id'] : null;
        $this->container['subcategory'] = isset($data['subcategory']) ? $data['subcategory'] : null;
        $this->container['update_date'] = isset($data['update_date']) ? $data['update_date'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['account_name'] === null) {
            $invalidProperties[] = "'account_name' can't be null";
        }
        if ($this->container['category'] === null) {
            $invalidProperties[] = "'category' can't be null";
        }
        if ($this->container['client_id'] === null) {
            $invalidProperties[] = "'client_id' can't be null";
        }
        if ($this->container['institution_name'] === null) {
            $invalidProperties[] = "'institution_name' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account_holder
     *
     * @return string
     */
    public function getAccountHolder()
    {
        return $this->container['account_holder'];
    }

    /**
     * Sets account_holder
     *
     * @param string $account_holder account_holder
     *
     * @return $this
     */
    public function setAccountHolder($account_holder)
    {
        $this->container['account_holder'] = $account_holder;

        return $this;
    }

    /**
     * Gets account_name
     *
     * @return string
     */
    public function getAccountName()
    {
        return $this->container['account_name'];
    }

    /**
     * Sets account_name
     *
     * @param string $account_name accountName
     *
     * @return $this
     */
    public function setAccountName($account_name)
    {
        $this->container['account_name'] = $account_name;

        return $this;
    }

    /**
     * Gets bank_link_id
     *
     * @return string
     */
    public function getBankLinkId()
    {
        return $this->container['bank_link_id'];
    }

    /**
     * Sets bank_link_id
     *
     * @param string $bank_link_id bankLinkId
     *
     * @return $this
     */
    public function setBankLinkId($bank_link_id)
    {
        $this->container['bank_link_id'] = $bank_link_id;

        return $this;
    }

    /**
     * Gets category
     *
     * @return string
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param string $category category
     *
     * @return $this
     */
    public function setCategory($category)
    {
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets client_id
     *
     * @return string
     */
    public function getClientId()
    {
        return $this->container['client_id'];
    }

    /**
     * Sets client_id
     *
     * @param string $client_id clientId
     *
     * @return $this
     */
    public function setClientId($client_id)
    {
        $this->container['client_id'] = $client_id;

        return $this;
    }

    /**
     * Gets create_date
     *
     * @return \DateTime
     */
    public function getCreateDate()
    {
        return $this->container['create_date'];
    }

    /**
     * Sets create_date
     *
     * @param \DateTime $create_date create_date
     *
     * @return $this
     */
    public function setCreateDate($create_date)
    {
        $this->container['create_date'] = $create_date;

        return $this;
    }

    /**
     * Gets currency_code
     *
     * @return string
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     *
     * @param string $currency_code currencyCode
     *
     * @return $this
     */
    public function setCurrencyCode($currency_code)
    {
        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Gets financial_offer_id
     *
     * @return string
     */
    public function getFinancialOfferId()
    {
        return $this->container['financial_offer_id'];
    }

    /**
     * Sets financial_offer_id
     *
     * @param string $financial_offer_id financial_offer_id
     *
     * @return $this
     */
    public function setFinancialOfferId($financial_offer_id)
    {
        $this->container['financial_offer_id'] = $financial_offer_id;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets institution_name
     *
     * @return string
     */
    public function getInstitutionName()
    {
        return $this->container['institution_name'];
    }

    /**
     * Sets institution_name
     *
     * @param string $institution_name institutionName
     *
     * @return $this
     */
    public function setInstitutionName($institution_name)
    {
        $this->container['institution_name'] = $institution_name;

        return $this;
    }

    /**
     * Gets is_active
     *
     * @return bool
     */
    public function getIsActive()
    {
        return $this->container['is_active'];
    }

    /**
     * Sets is_active
     *
     * @param bool $is_active isActive
     *
     * @return $this
     */
    public function setIsActive($is_active)
    {
        $this->container['is_active'] = $is_active;

        return $this;
    }

    /**
     * Gets is_asset
     *
     * @return bool
     */
    public function getIsAsset()
    {
        return $this->container['is_asset'];
    }

    /**
     * Sets is_asset
     *
     * @param bool $is_asset is_asset
     *
     * @return $this
     */
    public function setIsAsset($is_asset)
    {
        $this->container['is_asset'] = $is_asset;

        return $this;
    }

    /**
     * Gets is_business
     *
     * @return bool
     */
    public function getIsBusiness()
    {
        return $this->container['is_business'];
    }

    /**
     * Sets is_business
     *
     * @param bool $is_business isBusiness
     *
     * @return $this
     */
    public function setIsBusiness($is_business)
    {
        $this->container['is_business'] = $is_business;

        return $this;
    }

    /**
     * Gets is_cash
     *
     * @return bool
     */
    public function getIsCash()
    {
        return $this->container['is_cash'];
    }

    /**
     * Sets is_cash
     *
     * @param bool $is_cash isCash
     *
     * @return $this
     */
    public function setIsCash($is_cash)
    {
        $this->container['is_cash'] = $is_cash;

        return $this;
    }

    /**
     * Gets is_investment
     *
     * @return bool
     */
    public function getIsInvestment()
    {
        return $this->container['is_investment'];
    }

    /**
     * Sets is_investment
     *
     * @param bool $is_investment isInvestment
     *
     * @return $this
     */
    public function setIsInvestment($is_investment)
    {
        $this->container['is_investment'] = $is_investment;

        return $this;
    }

    /**
     * Gets is_link_verified
     *
     * @return bool
     */
    public function getIsLinkVerified()
    {
        return $this->container['is_link_verified'];
    }

    /**
     * Sets is_link_verified
     *
     * @param bool $is_link_verified isLinkVerified
     *
     * @return $this
     */
    public function setIsLinkVerified($is_link_verified)
    {
        $this->container['is_link_verified'] = $is_link_verified;

        return $this;
    }

    /**
     * Gets is_manual
     *
     * @return bool
     */
    public function getIsManual()
    {
        return $this->container['is_manual'];
    }

    /**
     * Sets is_manual
     *
     * @param bool $is_manual isManual
     *
     * @return $this
     */
    public function setIsManual($is_manual)
    {
        $this->container['is_manual'] = $is_manual;

        return $this;
    }

    /**
     * Gets mask
     *
     * @return string
     */
    public function getMask()
    {
        return $this->container['mask'];
    }

    /**
     * Sets mask
     *
     * @param string $mask mask
     *
     * @return $this
     */
    public function setMask($mask)
    {
        $this->container['mask'] = $mask;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return map[string,string]
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param map[string,string] $metadata metadata
     *
     * @return $this
     */
    public function setMetadata($metadata)
    {
        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets secondary_id
     *
     * @return string
     */
    public function getSecondaryId()
    {
        return $this->container['secondary_id'];
    }

    /**
     * Sets secondary_id
     *
     * @param string $secondary_id secondary_id
     *
     * @return $this
     */
    public function setSecondaryId($secondary_id)
    {
        $this->container['secondary_id'] = $secondary_id;

        return $this;
    }

    /**
     * Gets subcategory
     *
     * @return string
     */
    public function getSubcategory()
    {
        return $this->container['subcategory'];
    }

    /**
     * Sets subcategory
     *
     * @param string $subcategory subcategory
     *
     * @return $this
     */
    public function setSubcategory($subcategory)
    {
        $this->container['subcategory'] = $subcategory;

        return $this;
    }

    /**
     * Gets update_date
     *
     * @return \DateTime
     */
    public function getUpdateDate()
    {
        return $this->container['update_date'];
    }

    /**
     * Sets update_date
     *
     * @param \DateTime $update_date update_date
     *
     * @return $this
     */
    public function setUpdateDate($update_date)
    {
        $this->container['update_date'] = $update_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


