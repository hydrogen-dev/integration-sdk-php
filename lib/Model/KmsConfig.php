<?php
/**
 * KmsConfig
 *
 * PHP version 5
 *
 * @category Class
 * @package  com\hydrogen\integration
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Hydrogen Integration API
 *
 * The Hydrogen Integration API
 *
 * OpenAPI spec version: 1.2.1
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.18
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace com\hydrogen\integration\Model;

use \ArrayAccess;
use \com\hydrogen\integration\ObjectSerializer;

/**
 * KmsConfig Class Doc Comment
 *
 * @category Class
 * @description Kms Config details
 * @package  com\hydrogen\integration
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class KmsConfig implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'KmsConfig';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'aws_key_id' => 'string',
        'create_date' => '\DateTime',
        'id' => 'string',
        'key_name' => 'string',
        'key_value' => 'string',
        'nucleus_client_id' => 'string',
        'product' => 'string',
        'secondary_id' => 'string',
        'update_date' => '\DateTime',
        'vendor_id' => 'string',
        'vendor_name' => 'string',
        'wallet_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'aws_key_id' => null,
        'create_date' => 'date-time',
        'id' => 'uuid',
        'key_name' => null,
        'key_value' => null,
        'nucleus_client_id' => 'uuid',
        'product' => null,
        'secondary_id' => null,
        'update_date' => 'date-time',
        'vendor_id' => 'uuid',
        'vendor_name' => null,
        'wallet_id' => 'uuid'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'aws_key_id' => 'aws_key_id',
        'create_date' => 'create_date',
        'id' => 'id',
        'key_name' => 'key_name',
        'key_value' => 'key_value',
        'nucleus_client_id' => 'nucleus_client_id',
        'product' => 'product',
        'secondary_id' => 'secondary_id',
        'update_date' => 'update_date',
        'vendor_id' => 'vendor_id',
        'vendor_name' => 'vendor_name',
        'wallet_id' => 'wallet_id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'aws_key_id' => 'setAwsKeyId',
        'create_date' => 'setCreateDate',
        'id' => 'setId',
        'key_name' => 'setKeyName',
        'key_value' => 'setKeyValue',
        'nucleus_client_id' => 'setNucleusClientId',
        'product' => 'setProduct',
        'secondary_id' => 'setSecondaryId',
        'update_date' => 'setUpdateDate',
        'vendor_id' => 'setVendorId',
        'vendor_name' => 'setVendorName',
        'wallet_id' => 'setWalletId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'aws_key_id' => 'getAwsKeyId',
        'create_date' => 'getCreateDate',
        'id' => 'getId',
        'key_name' => 'getKeyName',
        'key_value' => 'getKeyValue',
        'nucleus_client_id' => 'getNucleusClientId',
        'product' => 'getProduct',
        'secondary_id' => 'getSecondaryId',
        'update_date' => 'getUpdateDate',
        'vendor_id' => 'getVendorId',
        'vendor_name' => 'getVendorName',
        'wallet_id' => 'getWalletId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['aws_key_id'] = isset($data['aws_key_id']) ? $data['aws_key_id'] : null;
        $this->container['create_date'] = isset($data['create_date']) ? $data['create_date'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['key_name'] = isset($data['key_name']) ? $data['key_name'] : null;
        $this->container['key_value'] = isset($data['key_value']) ? $data['key_value'] : null;
        $this->container['nucleus_client_id'] = isset($data['nucleus_client_id']) ? $data['nucleus_client_id'] : null;
        $this->container['product'] = isset($data['product']) ? $data['product'] : null;
        $this->container['secondary_id'] = isset($data['secondary_id']) ? $data['secondary_id'] : null;
        $this->container['update_date'] = isset($data['update_date']) ? $data['update_date'] : null;
        $this->container['vendor_id'] = isset($data['vendor_id']) ? $data['vendor_id'] : null;
        $this->container['vendor_name'] = isset($data['vendor_name']) ? $data['vendor_name'] : null;
        $this->container['wallet_id'] = isset($data['wallet_id']) ? $data['wallet_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['key_name'] === null) {
            $invalidProperties[] = "'key_name' can't be null";
        }
        if ($this->container['nucleus_client_id'] === null) {
            $invalidProperties[] = "'nucleus_client_id' can't be null";
        }
        if ($this->container['product'] === null) {
            $invalidProperties[] = "'product' can't be null";
        }
        if ($this->container['vendor_name'] === null) {
            $invalidProperties[] = "'vendor_name' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets aws_key_id
     *
     * @return string
     */
    public function getAwsKeyId()
    {
        return $this->container['aws_key_id'];
    }

    /**
     * Sets aws_key_id
     *
     * @param string $aws_key_id aws_key_id
     *
     * @return $this
     */
    public function setAwsKeyId($aws_key_id)
    {
        $this->container['aws_key_id'] = $aws_key_id;

        return $this;
    }

    /**
     * Gets create_date
     *
     * @return \DateTime
     */
    public function getCreateDate()
    {
        return $this->container['create_date'];
    }

    /**
     * Sets create_date
     *
     * @param \DateTime $create_date create_date
     *
     * @return $this
     */
    public function setCreateDate($create_date)
    {
        $this->container['create_date'] = $create_date;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets key_name
     *
     * @return string
     */
    public function getKeyName()
    {
        return $this->container['key_name'];
    }

    /**
     * Sets key_name
     *
     * @param string $key_name keyName
     *
     * @return $this
     */
    public function setKeyName($key_name)
    {
        $this->container['key_name'] = $key_name;

        return $this;
    }

    /**
     * Gets key_value
     *
     * @return string
     */
    public function getKeyValue()
    {
        return $this->container['key_value'];
    }

    /**
     * Sets key_value
     *
     * @param string $key_value keyValue
     *
     * @return $this
     */
    public function setKeyValue($key_value)
    {
        $this->container['key_value'] = $key_value;

        return $this;
    }

    /**
     * Gets nucleus_client_id
     *
     * @return string
     */
    public function getNucleusClientId()
    {
        return $this->container['nucleus_client_id'];
    }

    /**
     * Sets nucleus_client_id
     *
     * @param string $nucleus_client_id nucleusClientId
     *
     * @return $this
     */
    public function setNucleusClientId($nucleus_client_id)
    {
        $this->container['nucleus_client_id'] = $nucleus_client_id;

        return $this;
    }

    /**
     * Gets product
     *
     * @return string
     */
    public function getProduct()
    {
        return $this->container['product'];
    }

    /**
     * Sets product
     *
     * @param string $product product
     *
     * @return $this
     */
    public function setProduct($product)
    {
        $this->container['product'] = $product;

        return $this;
    }

    /**
     * Gets secondary_id
     *
     * @return string
     */
    public function getSecondaryId()
    {
        return $this->container['secondary_id'];
    }

    /**
     * Sets secondary_id
     *
     * @param string $secondary_id secondary_id
     *
     * @return $this
     */
    public function setSecondaryId($secondary_id)
    {
        $this->container['secondary_id'] = $secondary_id;

        return $this;
    }

    /**
     * Gets update_date
     *
     * @return \DateTime
     */
    public function getUpdateDate()
    {
        return $this->container['update_date'];
    }

    /**
     * Sets update_date
     *
     * @param \DateTime $update_date update_date
     *
     * @return $this
     */
    public function setUpdateDate($update_date)
    {
        $this->container['update_date'] = $update_date;

        return $this;
    }

    /**
     * Gets vendor_id
     *
     * @return string
     */
    public function getVendorId()
    {
        return $this->container['vendor_id'];
    }

    /**
     * Sets vendor_id
     *
     * @param string $vendor_id vendor_id
     *
     * @return $this
     */
    public function setVendorId($vendor_id)
    {
        $this->container['vendor_id'] = $vendor_id;

        return $this;
    }

    /**
     * Gets vendor_name
     *
     * @return string
     */
    public function getVendorName()
    {
        return $this->container['vendor_name'];
    }

    /**
     * Sets vendor_name
     *
     * @param string $vendor_name vendorName
     *
     * @return $this
     */
    public function setVendorName($vendor_name)
    {
        $this->container['vendor_name'] = $vendor_name;

        return $this;
    }

    /**
     * Gets wallet_id
     *
     * @return string
     */
    public function getWalletId()
    {
        return $this->container['wallet_id'];
    }

    /**
     * Sets wallet_id
     *
     * @param string $wallet_id walletId
     *
     * @return $this
     */
    public function setWalletId($wallet_id)
    {
        $this->container['wallet_id'] = $wallet_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


