<?php
/**
 * ResponseEntity
 *
 * PHP version 5
 *
 * @category Class
 * @package  com\hydrogen\integration
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Hydrogen Integration API
 *
 * The Hydrogen Integration API
 *
 * OpenAPI spec version: 1.2.1
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.18
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace com\hydrogen\integration\Model;

use \ArrayAccess;
use \com\hydrogen\integration\ObjectSerializer;

/**
 * ResponseEntity Class Doc Comment
 *
 * @category Class
 * @package  com\hydrogen\integration
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ResponseEntity implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ResponseEntity';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'body' => 'object',
        'status_code' => 'string',
        'status_code_value' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'body' => null,
        'status_code' => null,
        'status_code_value' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'body' => 'body',
        'status_code' => 'status_code',
        'status_code_value' => 'status_code_value'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'body' => 'setBody',
        'status_code' => 'setStatusCode',
        'status_code_value' => 'setStatusCodeValue'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'body' => 'getBody',
        'status_code' => 'getStatusCode',
        'status_code_value' => 'getStatusCodeValue'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const STATUS_CODE__100_CONTINUE = '100 CONTINUE';
    const STATUS_CODE__101_SWITCHING_PROTOCOLS = '101 SWITCHING_PROTOCOLS';
    const STATUS_CODE__102_PROCESSING = '102 PROCESSING';
    const STATUS_CODE__103_CHECKPOINT = '103 CHECKPOINT';
    const STATUS_CODE__200_OK = '200 OK';
    const STATUS_CODE__201_CREATED = '201 CREATED';
    const STATUS_CODE__202_ACCEPTED = '202 ACCEPTED';
    const STATUS_CODE__203_NON_AUTHORITATIVE_INFORMATION = '203 NON_AUTHORITATIVE_INFORMATION';
    const STATUS_CODE__204_NO_CONTENT = '204 NO_CONTENT';
    const STATUS_CODE__205_RESET_CONTENT = '205 RESET_CONTENT';
    const STATUS_CODE__206_PARTIAL_CONTENT = '206 PARTIAL_CONTENT';
    const STATUS_CODE__207_MULTI_STATUS = '207 MULTI_STATUS';
    const STATUS_CODE__208_ALREADY_REPORTED = '208 ALREADY_REPORTED';
    const STATUS_CODE__226_IM_USED = '226 IM_USED';
    const STATUS_CODE__300_MULTIPLE_CHOICES = '300 MULTIPLE_CHOICES';
    const STATUS_CODE__301_MOVED_PERMANENTLY = '301 MOVED_PERMANENTLY';
    const STATUS_CODE__302_FOUND = '302 FOUND';
    const STATUS_CODE__302_MOVED_TEMPORARILY = '302 MOVED_TEMPORARILY';
    const STATUS_CODE__303_SEE_OTHER = '303 SEE_OTHER';
    const STATUS_CODE__304_NOT_MODIFIED = '304 NOT_MODIFIED';
    const STATUS_CODE__305_USE_PROXY = '305 USE_PROXY';
    const STATUS_CODE__307_TEMPORARY_REDIRECT = '307 TEMPORARY_REDIRECT';
    const STATUS_CODE__308_PERMANENT_REDIRECT = '308 PERMANENT_REDIRECT';
    const STATUS_CODE__400_BAD_REQUEST = '400 BAD_REQUEST';
    const STATUS_CODE__401_UNAUTHORIZED = '401 UNAUTHORIZED';
    const STATUS_CODE__402_PAYMENT_REQUIRED = '402 PAYMENT_REQUIRED';
    const STATUS_CODE__403_FORBIDDEN = '403 FORBIDDEN';
    const STATUS_CODE__404_NOT_FOUND = '404 NOT_FOUND';
    const STATUS_CODE__405_METHOD_NOT_ALLOWED = '405 METHOD_NOT_ALLOWED';
    const STATUS_CODE__406_NOT_ACCEPTABLE = '406 NOT_ACCEPTABLE';
    const STATUS_CODE__407_PROXY_AUTHENTICATION_REQUIRED = '407 PROXY_AUTHENTICATION_REQUIRED';
    const STATUS_CODE__408_REQUEST_TIMEOUT = '408 REQUEST_TIMEOUT';
    const STATUS_CODE__409_CONFLICT = '409 CONFLICT';
    const STATUS_CODE__410_GONE = '410 GONE';
    const STATUS_CODE__411_LENGTH_REQUIRED = '411 LENGTH_REQUIRED';
    const STATUS_CODE__412_PRECONDITION_FAILED = '412 PRECONDITION_FAILED';
    const STATUS_CODE__413_PAYLOAD_TOO_LARGE = '413 PAYLOAD_TOO_LARGE';
    const STATUS_CODE__413_REQUEST_ENTITY_TOO_LARGE = '413 REQUEST_ENTITY_TOO_LARGE';
    const STATUS_CODE__414_URI_TOO_LONG = '414 URI_TOO_LONG';
    const STATUS_CODE__414_REQUEST_URI_TOO_LONG = '414 REQUEST_URI_TOO_LONG';
    const STATUS_CODE__415_UNSUPPORTED_MEDIA_TYPE = '415 UNSUPPORTED_MEDIA_TYPE';
    const STATUS_CODE__416_REQUESTED_RANGE_NOT_SATISFIABLE = '416 REQUESTED_RANGE_NOT_SATISFIABLE';
    const STATUS_CODE__417_EXPECTATION_FAILED = '417 EXPECTATION_FAILED';
    const STATUS_CODE__418_I_AM_A_TEAPOT = '418 I_AM_A_TEAPOT';
    const STATUS_CODE__419_INSUFFICIENT_SPACE_ON_RESOURCE = '419 INSUFFICIENT_SPACE_ON_RESOURCE';
    const STATUS_CODE__420_METHOD_FAILURE = '420 METHOD_FAILURE';
    const STATUS_CODE__421_DESTINATION_LOCKED = '421 DESTINATION_LOCKED';
    const STATUS_CODE__422_UNPROCESSABLE_ENTITY = '422 UNPROCESSABLE_ENTITY';
    const STATUS_CODE__423_LOCKED = '423 LOCKED';
    const STATUS_CODE__424_FAILED_DEPENDENCY = '424 FAILED_DEPENDENCY';
    const STATUS_CODE__426_UPGRADE_REQUIRED = '426 UPGRADE_REQUIRED';
    const STATUS_CODE__428_PRECONDITION_REQUIRED = '428 PRECONDITION_REQUIRED';
    const STATUS_CODE__429_TOO_MANY_REQUESTS = '429 TOO_MANY_REQUESTS';
    const STATUS_CODE__431_REQUEST_HEADER_FIELDS_TOO_LARGE = '431 REQUEST_HEADER_FIELDS_TOO_LARGE';
    const STATUS_CODE__451_UNAVAILABLE_FOR_LEGAL_REASONS = '451 UNAVAILABLE_FOR_LEGAL_REASONS';
    const STATUS_CODE__500_INTERNAL_SERVER_ERROR = '500 INTERNAL_SERVER_ERROR';
    const STATUS_CODE__501_NOT_IMPLEMENTED = '501 NOT_IMPLEMENTED';
    const STATUS_CODE__502_BAD_GATEWAY = '502 BAD_GATEWAY';
    const STATUS_CODE__503_SERVICE_UNAVAILABLE = '503 SERVICE_UNAVAILABLE';
    const STATUS_CODE__504_GATEWAY_TIMEOUT = '504 GATEWAY_TIMEOUT';
    const STATUS_CODE__505_HTTP_VERSION_NOT_SUPPORTED = '505 HTTP_VERSION_NOT_SUPPORTED';
    const STATUS_CODE__506_VARIANT_ALSO_NEGOTIATES = '506 VARIANT_ALSO_NEGOTIATES';
    const STATUS_CODE__507_INSUFFICIENT_STORAGE = '507 INSUFFICIENT_STORAGE';
    const STATUS_CODE__508_LOOP_DETECTED = '508 LOOP_DETECTED';
    const STATUS_CODE__509_BANDWIDTH_LIMIT_EXCEEDED = '509 BANDWIDTH_LIMIT_EXCEEDED';
    const STATUS_CODE__510_NOT_EXTENDED = '510 NOT_EXTENDED';
    const STATUS_CODE__511_NETWORK_AUTHENTICATION_REQUIRED = '511 NETWORK_AUTHENTICATION_REQUIRED';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusCodeAllowableValues()
    {
        return [
            self::STATUS_CODE__100_CONTINUE,
            self::STATUS_CODE__101_SWITCHING_PROTOCOLS,
            self::STATUS_CODE__102_PROCESSING,
            self::STATUS_CODE__103_CHECKPOINT,
            self::STATUS_CODE__200_OK,
            self::STATUS_CODE__201_CREATED,
            self::STATUS_CODE__202_ACCEPTED,
            self::STATUS_CODE__203_NON_AUTHORITATIVE_INFORMATION,
            self::STATUS_CODE__204_NO_CONTENT,
            self::STATUS_CODE__205_RESET_CONTENT,
            self::STATUS_CODE__206_PARTIAL_CONTENT,
            self::STATUS_CODE__207_MULTI_STATUS,
            self::STATUS_CODE__208_ALREADY_REPORTED,
            self::STATUS_CODE__226_IM_USED,
            self::STATUS_CODE__300_MULTIPLE_CHOICES,
            self::STATUS_CODE__301_MOVED_PERMANENTLY,
            self::STATUS_CODE__302_FOUND,
            self::STATUS_CODE__302_MOVED_TEMPORARILY,
            self::STATUS_CODE__303_SEE_OTHER,
            self::STATUS_CODE__304_NOT_MODIFIED,
            self::STATUS_CODE__305_USE_PROXY,
            self::STATUS_CODE__307_TEMPORARY_REDIRECT,
            self::STATUS_CODE__308_PERMANENT_REDIRECT,
            self::STATUS_CODE__400_BAD_REQUEST,
            self::STATUS_CODE__401_UNAUTHORIZED,
            self::STATUS_CODE__402_PAYMENT_REQUIRED,
            self::STATUS_CODE__403_FORBIDDEN,
            self::STATUS_CODE__404_NOT_FOUND,
            self::STATUS_CODE__405_METHOD_NOT_ALLOWED,
            self::STATUS_CODE__406_NOT_ACCEPTABLE,
            self::STATUS_CODE__407_PROXY_AUTHENTICATION_REQUIRED,
            self::STATUS_CODE__408_REQUEST_TIMEOUT,
            self::STATUS_CODE__409_CONFLICT,
            self::STATUS_CODE__410_GONE,
            self::STATUS_CODE__411_LENGTH_REQUIRED,
            self::STATUS_CODE__412_PRECONDITION_FAILED,
            self::STATUS_CODE__413_PAYLOAD_TOO_LARGE,
            self::STATUS_CODE__413_REQUEST_ENTITY_TOO_LARGE,
            self::STATUS_CODE__414_URI_TOO_LONG,
            self::STATUS_CODE__414_REQUEST_URI_TOO_LONG,
            self::STATUS_CODE__415_UNSUPPORTED_MEDIA_TYPE,
            self::STATUS_CODE__416_REQUESTED_RANGE_NOT_SATISFIABLE,
            self::STATUS_CODE__417_EXPECTATION_FAILED,
            self::STATUS_CODE__418_I_AM_A_TEAPOT,
            self::STATUS_CODE__419_INSUFFICIENT_SPACE_ON_RESOURCE,
            self::STATUS_CODE__420_METHOD_FAILURE,
            self::STATUS_CODE__421_DESTINATION_LOCKED,
            self::STATUS_CODE__422_UNPROCESSABLE_ENTITY,
            self::STATUS_CODE__423_LOCKED,
            self::STATUS_CODE__424_FAILED_DEPENDENCY,
            self::STATUS_CODE__426_UPGRADE_REQUIRED,
            self::STATUS_CODE__428_PRECONDITION_REQUIRED,
            self::STATUS_CODE__429_TOO_MANY_REQUESTS,
            self::STATUS_CODE__431_REQUEST_HEADER_FIELDS_TOO_LARGE,
            self::STATUS_CODE__451_UNAVAILABLE_FOR_LEGAL_REASONS,
            self::STATUS_CODE__500_INTERNAL_SERVER_ERROR,
            self::STATUS_CODE__501_NOT_IMPLEMENTED,
            self::STATUS_CODE__502_BAD_GATEWAY,
            self::STATUS_CODE__503_SERVICE_UNAVAILABLE,
            self::STATUS_CODE__504_GATEWAY_TIMEOUT,
            self::STATUS_CODE__505_HTTP_VERSION_NOT_SUPPORTED,
            self::STATUS_CODE__506_VARIANT_ALSO_NEGOTIATES,
            self::STATUS_CODE__507_INSUFFICIENT_STORAGE,
            self::STATUS_CODE__508_LOOP_DETECTED,
            self::STATUS_CODE__509_BANDWIDTH_LIMIT_EXCEEDED,
            self::STATUS_CODE__510_NOT_EXTENDED,
            self::STATUS_CODE__511_NETWORK_AUTHENTICATION_REQUIRED,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['body'] = isset($data['body']) ? $data['body'] : null;
        $this->container['status_code'] = isset($data['status_code']) ? $data['status_code'] : null;
        $this->container['status_code_value'] = isset($data['status_code_value']) ? $data['status_code_value'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStatusCodeAllowableValues();
        if (!is_null($this->container['status_code']) && !in_array(strtoupper($this->container['status_code']), $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status_code', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets body
     *
     * @return object
     */
    public function getBody()
    {
        return $this->container['body'];
    }

    /**
     * Sets body
     *
     * @param object $body body
     *
     * @return $this
     */
    public function setBody($body)
    {
        $this->container['body'] = $body;

        return $this;
    }

    /**
     * Gets status_code
     *
     * @return string
     */
    public function getStatusCode()
    {
        return $this->container['status_code'];
    }

    /**
     * Sets status_code
     *
     * @param string $status_code status_code
     *
     * @return $this
     */
    public function setStatusCode($status_code)
    {
        $allowedValues = $this->getStatusCodeAllowableValues();
        if (!is_null($status_code) && !in_array(strtoupper($status_code), $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status_code', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status_code'] = $status_code;

        return $this;
    }

    /**
     * Gets status_code_value
     *
     * @return int
     */
    public function getStatusCodeValue()
    {
        return $this->container['status_code_value'];
    }

    /**
     * Sets status_code_value
     *
     * @param int $status_code_value status_code_value
     *
     * @return $this
     */
    public function setStatusCodeValue($status_code_value)
    {
        $this->container['status_code_value'] = $status_code_value;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


