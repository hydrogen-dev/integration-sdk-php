<?php
/**
 * SMS
 *
 * PHP version 5
 *
 * @category Class
 * @package  com\hydrogen\integration
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Hydrogen Integration API
 *
 * The Hydrogen Integration API
 *
 * OpenAPI spec version: 1.2.1
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.18
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace com\hydrogen\integration\Model;

use \ArrayAccess;
use \com\hydrogen\integration\ObjectSerializer;

/**
 * SMS Class Doc Comment
 *
 * @category Class
 * @description SMS Object
 * @package  com\hydrogen\integration
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SMS implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SMS';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'create_date' => '\DateTime',
        'delivery_status' => 'string',
        'delivery_status_timestamp' => '\DateTime',
        'from' => 'string',
        'id' => 'string',
        'nucleus_business_id' => 'string',
        'nucleus_client_id' => 'string',
        'reply_message' => 'string',
        'secondary_id' => 'string',
        'sms_id' => 'string',
        'to' => 'string',
        'type' => 'string',
        'update_date' => '\DateTime',
        'vendor_account_id' => 'string',
        'vendor_id' => 'string',
        'vendor_name' => 'string',
        'vendor_sms_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'create_date' => 'date-time',
        'delivery_status' => null,
        'delivery_status_timestamp' => 'date-time',
        'from' => null,
        'id' => 'uuid',
        'nucleus_business_id' => 'uuid',
        'nucleus_client_id' => 'uuid',
        'reply_message' => null,
        'secondary_id' => null,
        'sms_id' => 'uuid',
        'to' => null,
        'type' => null,
        'update_date' => 'date-time',
        'vendor_account_id' => null,
        'vendor_id' => 'uuid',
        'vendor_name' => null,
        'vendor_sms_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'create_date' => 'create_date',
        'delivery_status' => 'delivery_status',
        'delivery_status_timestamp' => 'delivery_status_timestamp',
        'from' => 'from',
        'id' => 'id',
        'nucleus_business_id' => 'nucleus_business_id',
        'nucleus_client_id' => 'nucleus_client_id',
        'reply_message' => 'reply_message',
        'secondary_id' => 'secondary_id',
        'sms_id' => 'sms_id',
        'to' => 'to',
        'type' => 'type',
        'update_date' => 'update_date',
        'vendor_account_id' => 'vendor_account_id',
        'vendor_id' => 'vendor_id',
        'vendor_name' => 'vendor_name',
        'vendor_sms_id' => 'vendor_sms_id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'create_date' => 'setCreateDate',
        'delivery_status' => 'setDeliveryStatus',
        'delivery_status_timestamp' => 'setDeliveryStatusTimestamp',
        'from' => 'setFrom',
        'id' => 'setId',
        'nucleus_business_id' => 'setNucleusBusinessId',
        'nucleus_client_id' => 'setNucleusClientId',
        'reply_message' => 'setReplyMessage',
        'secondary_id' => 'setSecondaryId',
        'sms_id' => 'setSmsId',
        'to' => 'setTo',
        'type' => 'setType',
        'update_date' => 'setUpdateDate',
        'vendor_account_id' => 'setVendorAccountId',
        'vendor_id' => 'setVendorId',
        'vendor_name' => 'setVendorName',
        'vendor_sms_id' => 'setVendorSmsId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'create_date' => 'getCreateDate',
        'delivery_status' => 'getDeliveryStatus',
        'delivery_status_timestamp' => 'getDeliveryStatusTimestamp',
        'from' => 'getFrom',
        'id' => 'getId',
        'nucleus_business_id' => 'getNucleusBusinessId',
        'nucleus_client_id' => 'getNucleusClientId',
        'reply_message' => 'getReplyMessage',
        'secondary_id' => 'getSecondaryId',
        'sms_id' => 'getSmsId',
        'to' => 'getTo',
        'type' => 'getType',
        'update_date' => 'getUpdateDate',
        'vendor_account_id' => 'getVendorAccountId',
        'vendor_id' => 'getVendorId',
        'vendor_name' => 'getVendorName',
        'vendor_sms_id' => 'getVendorSmsId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['create_date'] = isset($data['create_date']) ? $data['create_date'] : null;
        $this->container['delivery_status'] = isset($data['delivery_status']) ? $data['delivery_status'] : null;
        $this->container['delivery_status_timestamp'] = isset($data['delivery_status_timestamp']) ? $data['delivery_status_timestamp'] : null;
        $this->container['from'] = isset($data['from']) ? $data['from'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['nucleus_business_id'] = isset($data['nucleus_business_id']) ? $data['nucleus_business_id'] : null;
        $this->container['nucleus_client_id'] = isset($data['nucleus_client_id']) ? $data['nucleus_client_id'] : null;
        $this->container['reply_message'] = isset($data['reply_message']) ? $data['reply_message'] : null;
        $this->container['secondary_id'] = isset($data['secondary_id']) ? $data['secondary_id'] : null;
        $this->container['sms_id'] = isset($data['sms_id']) ? $data['sms_id'] : null;
        $this->container['to'] = isset($data['to']) ? $data['to'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['update_date'] = isset($data['update_date']) ? $data['update_date'] : null;
        $this->container['vendor_account_id'] = isset($data['vendor_account_id']) ? $data['vendor_account_id'] : null;
        $this->container['vendor_id'] = isset($data['vendor_id']) ? $data['vendor_id'] : null;
        $this->container['vendor_name'] = isset($data['vendor_name']) ? $data['vendor_name'] : null;
        $this->container['vendor_sms_id'] = isset($data['vendor_sms_id']) ? $data['vendor_sms_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets create_date
     *
     * @return \DateTime
     */
    public function getCreateDate()
    {
        return $this->container['create_date'];
    }

    /**
     * Sets create_date
     *
     * @param \DateTime $create_date create_date
     *
     * @return $this
     */
    public function setCreateDate($create_date)
    {
        $this->container['create_date'] = $create_date;

        return $this;
    }

    /**
     * Gets delivery_status
     *
     * @return string
     */
    public function getDeliveryStatus()
    {
        return $this->container['delivery_status'];
    }

    /**
     * Sets delivery_status
     *
     * @param string $delivery_status deliveryStatus
     *
     * @return $this
     */
    public function setDeliveryStatus($delivery_status)
    {
        $this->container['delivery_status'] = $delivery_status;

        return $this;
    }

    /**
     * Gets delivery_status_timestamp
     *
     * @return \DateTime
     */
    public function getDeliveryStatusTimestamp()
    {
        return $this->container['delivery_status_timestamp'];
    }

    /**
     * Sets delivery_status_timestamp
     *
     * @param \DateTime $delivery_status_timestamp deliveryStatusTimestamp
     *
     * @return $this
     */
    public function setDeliveryStatusTimestamp($delivery_status_timestamp)
    {
        $this->container['delivery_status_timestamp'] = $delivery_status_timestamp;

        return $this;
    }

    /**
     * Gets from
     *
     * @return string
     */
    public function getFrom()
    {
        return $this->container['from'];
    }

    /**
     * Sets from
     *
     * @param string $from from
     *
     * @return $this
     */
    public function setFrom($from)
    {
        $this->container['from'] = $from;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets nucleus_business_id
     *
     * @return string
     */
    public function getNucleusBusinessId()
    {
        return $this->container['nucleus_business_id'];
    }

    /**
     * Sets nucleus_business_id
     *
     * @param string $nucleus_business_id nucleusBusinessId
     *
     * @return $this
     */
    public function setNucleusBusinessId($nucleus_business_id)
    {
        $this->container['nucleus_business_id'] = $nucleus_business_id;

        return $this;
    }

    /**
     * Gets nucleus_client_id
     *
     * @return string
     */
    public function getNucleusClientId()
    {
        return $this->container['nucleus_client_id'];
    }

    /**
     * Sets nucleus_client_id
     *
     * @param string $nucleus_client_id nucleusClientId
     *
     * @return $this
     */
    public function setNucleusClientId($nucleus_client_id)
    {
        $this->container['nucleus_client_id'] = $nucleus_client_id;

        return $this;
    }

    /**
     * Gets reply_message
     *
     * @return string
     */
    public function getReplyMessage()
    {
        return $this->container['reply_message'];
    }

    /**
     * Sets reply_message
     *
     * @param string $reply_message replyMessage
     *
     * @return $this
     */
    public function setReplyMessage($reply_message)
    {
        $this->container['reply_message'] = $reply_message;

        return $this;
    }

    /**
     * Gets secondary_id
     *
     * @return string
     */
    public function getSecondaryId()
    {
        return $this->container['secondary_id'];
    }

    /**
     * Sets secondary_id
     *
     * @param string $secondary_id secondary_id
     *
     * @return $this
     */
    public function setSecondaryId($secondary_id)
    {
        $this->container['secondary_id'] = $secondary_id;

        return $this;
    }

    /**
     * Gets sms_id
     *
     * @return string
     */
    public function getSmsId()
    {
        return $this->container['sms_id'];
    }

    /**
     * Sets sms_id
     *
     * @param string $sms_id sms_id
     *
     * @return $this
     */
    public function setSmsId($sms_id)
    {
        $this->container['sms_id'] = $sms_id;

        return $this;
    }

    /**
     * Gets to
     *
     * @return string
     */
    public function getTo()
    {
        return $this->container['to'];
    }

    /**
     * Sets to
     *
     * @param string $to to
     *
     * @return $this
     */
    public function setTo($to)
    {
        $this->container['to'] = $to;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets update_date
     *
     * @return \DateTime
     */
    public function getUpdateDate()
    {
        return $this->container['update_date'];
    }

    /**
     * Sets update_date
     *
     * @param \DateTime $update_date update_date
     *
     * @return $this
     */
    public function setUpdateDate($update_date)
    {
        $this->container['update_date'] = $update_date;

        return $this;
    }

    /**
     * Gets vendor_account_id
     *
     * @return string
     */
    public function getVendorAccountId()
    {
        return $this->container['vendor_account_id'];
    }

    /**
     * Sets vendor_account_id
     *
     * @param string $vendor_account_id vendor_account_id
     *
     * @return $this
     */
    public function setVendorAccountId($vendor_account_id)
    {
        $this->container['vendor_account_id'] = $vendor_account_id;

        return $this;
    }

    /**
     * Gets vendor_id
     *
     * @return string
     */
    public function getVendorId()
    {
        return $this->container['vendor_id'];
    }

    /**
     * Sets vendor_id
     *
     * @param string $vendor_id vendorId
     *
     * @return $this
     */
    public function setVendorId($vendor_id)
    {
        $this->container['vendor_id'] = $vendor_id;

        return $this;
    }

    /**
     * Gets vendor_name
     *
     * @return string
     */
    public function getVendorName()
    {
        return $this->container['vendor_name'];
    }

    /**
     * Sets vendor_name
     *
     * @param string $vendor_name vendor_name
     *
     * @return $this
     */
    public function setVendorName($vendor_name)
    {
        $this->container['vendor_name'] = $vendor_name;

        return $this;
    }

    /**
     * Gets vendor_sms_id
     *
     * @return string
     */
    public function getVendorSmsId()
    {
        return $this->container['vendor_sms_id'];
    }

    /**
     * Sets vendor_sms_id
     *
     * @param string $vendor_sms_id vendor_sms_id
     *
     * @return $this
     */
    public function setVendorSmsId($vendor_sms_id)
    {
        $this->container['vendor_sms_id'] = $vendor_sms_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


